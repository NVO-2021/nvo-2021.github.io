<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo优化攻略]]></title>
    <url>%2F2018%2F10%2F25%2Fhexo%E4%BC%98%E5%8C%96%E6%94%BB%E7%95%A5%2F</url>
    <content type="text"><![CDATA[写在前面这个攻略主要是给有一定diy能力的hexo博主。一些细节的攻略可以参考如下文章：hexo 基础配置优化插件进阶静态代码压缩文章比较长的情况下网页往往会显示地较慢。因此，需要对静态代码进行压缩，以提高网站的响应速度。1npm install hexo-all-minifier --save在hexo根目录下的_config.yml中配置:12345678910111213141516171819202122232425262728# 代码压缩 github.com/chenzhutian/hexo-all-minifierall_minifier: truehtml_minifier: enable: true ignore_error: false exclude: css_minifier: enable: true exclude: - '*.min.css'js_minifier: enable: true mangle: true output: compress: exclude: - '*.min.js'image_minifier: enable: false # 图片不压缩 interlaced: false multipass: false optimizationLevel: 2 pngquant: false progressive: false文章加密插件安装1npm install hexo-encrypt --save在项目_config.yml中声名默认密码123#该密码为全局默认密码encrypt: password: 你的密码在文章头加入密码配置12encrypt: trueenc_pwd: 你的文章独立密码在根目录的package.json中追加配置，记得补全“,”1"hexo-encrypt": "^0.2.0"最终效果网站顶部进度条在{hexo-path}/themes/next/layout/_partials/head/head.swig中顶部加入如下代码123456789101112131415&lt;script src="//cdn.bootcss.com/pace/1.0.2/pace.min.js"&gt;&lt;/script&gt;&lt;link href="//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css" rel="stylesheet"&gt;&lt;style&gt;.pace .pace-progress &#123; background: #f6a427; /*进度条颜色*/ height: 3px;&#125;.pace .pace-progress-inner &#123; box-shadow: 0 0 10px #1E92FB, 0 0 5px #1E92FB; /*阴影颜色*/&#125;.pace .pace-activity &#123; border-top-color: #1E92FB; /*上边框颜色*/ border-left-color: #1E92FB; /*左边框颜色*/&#125;&lt;/style&gt;效果图利益相关转载请注明出处，否则我也拿你没办法。]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>优化</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于装修的一点想法]]></title>
    <url>%2F2018%2F10%2F25%2F%E5%85%B3%E4%BA%8E%E8%A3%85%E4%BF%AE%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95%2F</url>
    <content type="text"><![CDATA[装修风格的讨论在这个宅基地很难批准的时候，终于可以造房子了。楼房的样式是那种两层平层 + 一层别墅式的样子，虽然比不上欧式的新颖，但是空间足够大，四平八稳的风格还算能接受。对于装修风格，和瓢羹同学也有一些讨论。一开始瓢羹同学认为欧式的辉煌装修风格不错，但是我觉得有点老土。于是呢，她说北欧性冷风不错，我也觉得可以，只是美中不足的是有点暗色调，不适合居家。我呢，有点青睐于和风的风格，比较的小资。但是，作为自建房格调又显得有点小气了。所以，经过一番博弈，我们最终把两种风格进行了mix——其实我们不是一定青睐和风，亦或是北欧。后来我们发现，我们只是对原木风比较感冒。原木材质的纹理，配合较大空间的色彩搭配，整体给人一种居家的舒适感和归属感。同时，又比较有格调。要准备的工作从目前来看打的轮廓和格局已经敲定了，但是整体装修的渲染还没出来，准备抽空到酷家乐搞一波装修效果图。到时候看看整体下来的装修效果如何。装修资料酷家乐 有好几套比较合理的和风装修来自酷家乐，吊顶采用了比较简约的纯白+造型别致的灯具，这个风格我们都比较喜欢。易盖房 小别墅一些样式比较讨巧，看着比较舒服。利益相关此文涉及的资料均无利益相关。如若转载请注明出处！]]></content>
      <tags>
        <tag>酷玩</tag>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员养生秘笈]]></title>
    <url>%2F2018%2F10%2F21%2F%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%85%BB%E7%94%9F%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>程序员</tag>
        <tag>养生</tag>
        <tag>码农</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 源码阅读]]></title>
    <url>%2F2018%2F10%2F19%2Fspring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[对于spring源码的一些个人的见解！！！spring 核心代码12345参考资料：spring源码深度解析Spring版本：Spring-4.3.5-RELEASE吐槽下，老外写的东西真晕啊，像亲妈一样啰啰嗦嗦帮你考虑了各种情况，然后最好还不忘加一句：如果你不满意，还可以拓展！！！核心流程初始化过程非常清晰的模板方法，每一个步骤封装成一个具体的函数进行代理，职责清晰明了；12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273@Overridepublic void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; //预热，做准备工作 prepareRefresh(); // Tell the subclass to refresh the internal bean factory. //获取内部的bean factory ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); // Prepare the bean factory for use in this context. //预热beanFactory prepareBeanFactory(beanFactory); try &#123; // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory(beanFactory); // Invoke factory processors registered as beans in the context. //beanFactory在上下文中注册bean，核心的代码就在这里 invokeBeanFactoryPostProcessors(beanFactory); // Register bean processors that intercept bean creation. // bean创建的时候拦截并注册bean处理器，这里只创建处理器，真正的创建是在getBean(..)方法里 registerBeanPostProcessors(beanFactory); // Initialize message source for this context. // 用于支持国际化，比如一些日志的国际化匹配等； initMessageSource(); // 为上下文初始化消息传播工具 initApplicationEventMulticaster(); // Initialize other special beans in specific context subclasses. // 钩子方法：额外的beans处理方法 onRefresh(); // Check for listener beans and register them. // 注册监听器 registerListeners(); // Instantiate all remaining (non-lazy-init) singletons. // 实例化非延时加载的bean单例 finishBeanFactoryInitialization(beanFactory); // Last step: publish corresponding event. // push beans创建完成的消息 finishRefresh(); &#125; catch (BeansException ex) &#123; if (logger.isWarnEnabled()) &#123; logger.warn("Exception encountered during context initialization - " + "cancelling refresh attempt: " + ex); &#125; // Destroy already created singletons to avoid dangling resources. destroyBeans(); // Reset 'active' flag. cancelRefresh(ex); // Propagate exception to caller. throw ex; &#125; finally &#123; // Reset common introspection caches in Spring's core, since we // might not ever need metadata for singleton beans anymore... resetCommonCaches(); &#125; &#125;&#125;spring 类加载的基本类spring DefaultListableBeanFactory UML示意图：spring bean 创建过程转换beanName尝试从缓存中获取单例bean本身的实例化原型模式依赖检测parentBeanFactory 检测将gernerecBeanDefinition 转换成 RootBeanDefination寻找依赖根据scope 初始化(init)对应的bean类型转换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171/** * Return an instance, which may be shared or independent, of the specified bean. * @param name the name of the bean to retrieve * @param requiredType the required type of the bean to retrieve * @param args arguments to use when creating a bean instance using explicit arguments * (only applied when creating a new instance as opposed to retrieving an existing one) * @param typeCheckOnly whether the instance is obtained for a type check, * not for actual use * @return an instance of the bean * @throws BeansException if the bean could not be created */@SuppressWarnings(&quot;unchecked&quot;)protected &lt;T&gt; T doGetBean( final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException &#123; //转换beanName，我们知道在spring中，bean factory的名称都是类似于 &amp;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory //因此获取的时候需要进行转换 final String beanName = transformedBeanName(name); Object bean; // Eagerly check singleton cache for manually registered singletons. // 尝试从缓存中获取单例 Object sharedInstance = getSingleton(beanName); if (sharedInstance != null &amp;&amp; args == null) &#123; if (logger.isDebugEnabled()) &#123; if (isSingletonCurrentlyInCreation(beanName)) &#123; logger.debug(&quot;Returning eagerly cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos; that is not fully initialized yet - a consequence of a circular reference&quot;); &#125; else &#123; logger.debug(&quot;Returning cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;); &#125; &#125; //实例化 bean = getObjectForBeanInstance(sharedInstance, name, beanName, null); &#125; else &#123; // Fail if we&apos;re already creating this bean instance: // We&apos;re assumably within a circular reference. // 检测当前依赖的类是否正在创建，如果是，则抛出异常 if (isPrototypeCurrentlyInCreation(beanName)) &#123; throw new BeanCurrentlyInCreationException(beanName); &#125; // Check if bean definition exists in this factory. // 如果bean配置不存在则只能去父工厂找 BeanFactory parentBeanFactory = getParentBeanFactory(); if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123; // Not found -&gt; check parent. String nameToLookup = originalBeanName(name); if (args != null) &#123; // Delegation to parent with explicit args. return (T) parentBeanFactory.getBean(nameToLookup, args); &#125; else &#123; // No args -&gt; delegate to standard getBean method. return parentBeanFactory.getBean(nameToLookup, requiredType); &#125; &#125; if (!typeCheckOnly) &#123; markBeanAsCreated(beanName); &#125; try &#123; //转换并合并BeanDefinition属性 final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName); checkMergedBeanDefinition(mbd, beanName, args); // Guarantee initialization of beans that the current bean depends on. // 原型模式的bean需要循环检测依赖 防止出现A-&gt;B-&gt;A 的循环依赖情况出现 String[] dependsOn = mbd.getDependsOn(); if (dependsOn != null) &#123; for (String dep : dependsOn) &#123; if (isDependent(beanName, dep)) &#123; throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Circular depends-on relationship between &apos;&quot; + beanName + &quot;&apos; and &apos;&quot; + dep + &quot;&apos;&quot;); &#125; registerDependentBean(dep, beanName); getBean(dep); &#125; &#125; // Create bean instance. // 创建bean实例 if (mbd.isSingleton()) &#123; sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; try &#123; return createBean(beanName, mbd, args); &#125; catch (BeansException ex) &#123; // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; &#125; &#125; &#125;); bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd); &#125; else if (mbd.isPrototype()) &#123; // It&apos;s a prototype -&gt; create a new instance. Object prototypeInstance = null; try &#123; beforePrototypeCreation(beanName); prototypeInstance = createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd); &#125; else &#123; String scopeName = mbd.getScope(); final Scope scope = this.scopes.get(scopeName); if (scope == null) &#123; throw new IllegalStateException(&quot;No Scope registered for scope name &apos;&quot; + scopeName + &quot;&apos;&quot;); &#125; try &#123; Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; beforePrototypeCreation(beanName); try &#123; return createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; &#125; &#125;); bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd); &#125; catch (IllegalStateException ex) &#123; throw new BeanCreationException(beanName, &quot;Scope &apos;&quot; + scopeName + &quot;&apos; is not active for the current thread; consider &quot; + &quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;, ex); &#125; &#125; &#125; catch (BeansException ex) &#123; cleanupAfterBeanCreationFailure(beanName); throw ex; &#125; &#125; // Check if required type matches the type of the actual bean instance. // 转换bean类型 if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isAssignableFrom(bean.getClass())) &#123; try &#123; return getTypeConverter().convertIfNecessary(bean, requiredType); &#125; catch (TypeMismatchException ex) &#123; if (logger.isDebugEnabled()) &#123; logger.debug(&quot;Failed to convert bean &apos;&quot; + name + &quot;&apos; to required type &apos;&quot; + ClassUtils.getQualifiedName(requiredType) + &quot;&apos;&quot;, ex); &#125; throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass()); &#125; &#125; return (T) bean;&#125;spring事务隔离级别及事务传播实现propagation_requierd(spring的事务默认是该级别)：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112 * Create a TransactionStatus for an existing transaction. */private TransactionStatus handleExistingTransaction( TransactionDefinition definition, Object transaction, boolean debugEnabled) throws TransactionException &#123; //若为非事务方式，则抛异常 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123; throw new IllegalTransactionStateException( &quot;Existing transaction found for transaction marked with propagation &apos;never&apos;&quot;); &#125; // 若存在事务，挂起适当前事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123; if (debugEnabled) &#123; logger.debug(&quot;Suspending current transaction&quot;); &#125; // 挂起当前事务 Object suspendedResources = suspend(transaction); boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS); return prepareTransactionStatus( definition, null, false, newSynchronization, debugEnabled, suspendedResources); &#125; // 挂起当前事务，并新建事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123; if (debugEnabled) &#123; logger.debug(&quot;Suspending current transaction, creating new transaction with name [&quot; + definition.getName() + &quot;]&quot;); &#125; //挂起当前事务 SuspendedResourcesHolder suspendedResources = suspend(transaction); try &#123; boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); DefaultTransactionStatus status = newTransactionStatus( definition, transaction, true, newSynchronization, debugEnabled, suspendedResources); // 重新开启事务 doBegin(transaction, definition); prepareSynchronization(status, definition); return status; &#125; catch (RuntimeException beginEx) &#123; resumeAfterBeginException(transaction, suspendedResources, beginEx); throw beginEx; &#125; catch (Error beginErr) &#123; resumeAfterBeginException(transaction, suspendedResources, beginErr); throw beginErr; &#125; &#125; // 若当前事务存在，则嵌套执行事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123; if (!isNestedTransactionAllowed()) &#123; throw new NestedTransactionNotSupportedException( &quot;Transaction manager does not allow nested transactions by default - &quot; + &quot;specify &apos;nestedTransactionAllowed&apos; property with value &apos;true&apos;&quot;); &#125; if (debugEnabled) &#123; logger.debug(&quot;Creating nested transaction with name [&quot; + definition.getName() + &quot;]&quot;); &#125; // 判定是否支持事务备份点 if (useSavepointForNestedTransaction()) &#123; // Create savepoint within existing Spring-managed transaction, // through the SavepointManager API implemented by TransactionStatus. // Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization. DefaultTransactionStatus status = prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null); // 创建备份点 status.createAndHoldSavepoint(); return status; &#125; else &#123; // Nested transaction through nested begin and commit/rollback calls. // Usually only for JTA: Spring synchronization might get activated here // in case of a pre-existing JTA transaction. boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); DefaultTransactionStatus status = newTransactionStatus( definition, transaction, true, newSynchronization, debugEnabled, null); // 不支持备份点的情况下会新建事务 doBegin(transaction, definition); prepareSynchronization(status, definition); return status; &#125; &#125; // Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED. if (debugEnabled) &#123; logger.debug(&quot;Participating in existing transaction&quot;); &#125; if (isValidateExistingTransaction()) &#123; if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123; Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel(); if (currentIsolationLevel == null || currentIsolationLevel != definition.getIsolationLevel()) &#123; Constants isoConstants = DefaultTransactionDefinition.constants; throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; + definition + &quot;] specifies isolation level which is incompatible with existing transaction: &quot; + (currentIsolationLevel != null ? isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) : &quot;(unknown)&quot;)); &#125; &#125; if (!definition.isReadOnly()) &#123; if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123; throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; + definition + &quot;] is not marked as read-only but existing transaction is&quot;); &#125; &#125; &#125; boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);&#125;一些干货aop注入的实现过程doCreateBean中会暴露一个bean引用，用以处理循环引用；同时大家熟知的AOP就是通过getEarlyBeanReference(..)方法植入的；具体的，是在wrapIfNecessary(..) 方法中封装了advice并创建了代理；@Autowired注解的实现doCreateBean(..)中的populateBean(..)方法，实现了基于@Autowired注解的实现，根据名称或类型进行依赖的注入；]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>源码阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Mvc源码阅读]]></title>
    <url>%2F2018%2F10%2F19%2Fspringmvc%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[对springMVC的一些思考!!!Spring Mvc源码阅读12345678910111213SpringMVC核心处理流程：1、DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器2、HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）3、HandlerAdapter处理器适配器，请求数据绑定和转换，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）4、ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图5、然后再将Model模型中的数据渲染到View上这些过程都是以DispatcherServlet为中轴线进行的。入口源码springMVC的请求会交由dispatcherServlet处理，其本质上是一个多线程的请求处理机制；核心业务逻辑被设计在doDispatcher(..)方法中；123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100/** * Process the actual dispatching to the handler. * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order. * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters * to find the first that supports the handler class. * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers * themselves to decide which methods are acceptable. * @param request current HTTP request * @param response current HTTP response * @throws Exception in case of any kind of processing failure */protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; HttpServletRequest processedRequest = request; HandlerExecutionChain mappedHandler = null; boolean multipartRequestParsed = false; WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request); try &#123; ModelAndView mv = null; Exception dispatchException = null; try &#123; processedRequest = checkMultipart(request); multipartRequestParsed = (processedRequest != request); // 绑定url -&gt; 具体的handler/Controller.method(..) // Determine handler for the current request. mappedHandler = getHandler(processedRequest); if (mappedHandler == null || mappedHandler.getHandler() == null) &#123; noHandlerFound(processedRequest, response); return; &#125; // 根据handler绑定具体的adapter // Determine handler adapter for the current request. HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler()); // Process last-modified header, if supported by the handler. String method = request.getMethod(); boolean isGet = "GET".equals(method); if (isGet || "HEAD".equals(method)) &#123; long lastModified = ha.getLastModified(request, mappedHandler.getHandler()); if (logger.isDebugEnabled()) &#123; logger.debug("Last-Modified value for [" + getRequestUri(request) + "] is: " + lastModified); &#125; if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123; return; &#125; &#125; // interceptor 拦截器进行前置预处理 if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123; return; &#125; // 在handle方法中进行了请求数据的绑定，方法invoke，返回model的处理和封装等 // Actually invoke the handler. mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); if (asyncManager.isConcurrentHandlingStarted()) &#123; return; &#125; applyDefaultViewName(processedRequest, mv); mappedHandler.applyPostHandle(processedRequest, response, mv); &#125; catch (Exception ex) &#123; dispatchException = ex; &#125; catch (Throwable err) &#123; // As of 4.3, we're processing Errors thrown from handler methods as well, // making them available for @ExceptionHandler methods and other scenarios. dispatchException = new NestedServletException("Handler dispatch failed", err); &#125; processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException); &#125; catch (Exception ex) &#123; triggerAfterCompletion(processedRequest, response, mappedHandler, ex); &#125; catch (Throwable err) &#123; triggerAfterCompletion(processedRequest, response, mappedHandler, new NestedServletException("Handler processing failed", err)); &#125; finally &#123; if (asyncManager.isConcurrentHandlingStarted()) &#123; // Instead of postHandle and afterCompletion if (mappedHandler != null) &#123; mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response); &#125; &#125; else &#123; // Clean up any resources used by a multipart request. if (multipartRequestParsed) &#123; cleanupMultipart(processedRequest); &#125; &#125; &#125;&#125;核心关注的几个问题请求如何路由到具体的Controller上的方法进行处理?根据请求路径，与已知的handlerMapping进行匹配，并加入interceptors:dispatcherServlet.getHandler()最终调用AbstracteHandlerMapping.getHandlerExecutionChain(..)中进行url与handlerMapping进行匹配，并加入interceptors;扁平化的前端请求数据如何进行数据绑定？我们知道，前端的get/post等请求，会被requestServlet接受，并封装成HttpServletRequest的parameterMap中，每一项请求的数据结构都是 K-V 形的。而我们知道，像这样的形式，那么在这个中间数据如何实现数据绑定到Bean，String格式的Value 转换成各种目标格式。事实上，spring MVC将整个网络请求的处理流程进行了合理的切分,其大致的处理流程如下：12345678910111.调用匹配到的adapter.handle(..)2.然后调用invokeAndHandle(..)3.调用invokeForRequest(..)获取getMethodArgumentValues(..)获取和绑定入参;4.在具体的方法中，获取支持处理的argumentResolvers,然后调用resolveArgument(..)方法;5.在ModelAttributeMethodProcessor中调用bindRequestParameters(binder, webRequest),方法，然后再调用bind()进行bean参数的绑定；6.调用binder.convertIfNecessary(arg, parameter.getParameterType(), parameter)方法进行参数的转换；]]></content>
      <tags>
        <tag>Spring MVC</tag>
        <tag>Spring</tag>
        <tag>源码阅读</tag>
      </tags>
  </entry>
</search>
