<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo优化攻略]]></title>
    <url>%2F2018%2F10%2F25%2Fhexo%E4%BC%98%E5%8C%96%E6%94%BB%E7%95%A5%2F</url>
    <content type="text"><![CDATA[写在前面这个攻略主要是给有一定diy能力的hexo博主。一些细节的攻略可以参考如下文章：hexo 基础配置优化插件进阶静态代码压缩文章比较长的情况下网页往往会显示地较慢。因此，需要对静态代码进行压缩，以提高网站的响应速度。1npm install hexo-all-minifier --save在hexo根目录下的_config.yml中配置:12345678910111213141516171819202122232425262728# 代码压缩 github.com/chenzhutian/hexo-all-minifierall_minifier: truehtml_minifier: enable: true ignore_error: false exclude: css_minifier: enable: true exclude: - '*.min.css'js_minifier: enable: true mangle: true output: compress: exclude: - '*.min.js'image_minifier: enable: false # 图片不压缩 interlaced: false multipass: false optimizationLevel: 2 pngquant: false progressive: false文章加密插件安装1npm install hexo-encrypt --save在项目_config.yml中声名默认密码123#该密码为全局默认密码encrypt: password: 你的密码在文章头加入密码配置12encrypt: trueenc_pwd: 你的文章独立密码在根目录的package.json中追加配置，记得补全“,”1"hexo-encrypt": "^0.2.0"最终效果网站顶部进度条在{hexo-path}/themes/next/layout/_partials/head/head.swig中顶部加入如下代码123456789101112131415&lt;script src="//cdn.bootcss.com/pace/1.0.2/pace.min.js"&gt;&lt;/script&gt;&lt;link href="//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css" rel="stylesheet"&gt;&lt;style&gt;.pace .pace-progress &#123; background: #f6a427; /*进度条颜色*/ height: 3px;&#125;.pace .pace-progress-inner &#123; box-shadow: 0 0 10px #1E92FB, 0 0 5px #1E92FB; /*阴影颜色*/&#125;.pace .pace-activity &#123; border-top-color: #1E92FB; /*上边框颜色*/ border-left-color: #1E92FB; /*左边框颜色*/&#125;&lt;/style&gt;效果图利益相关转载请注明出处，否则我也拿你没办法。]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>优化</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于装修的一点想法]]></title>
    <url>%2F2018%2F10%2F25%2F%E5%85%B3%E4%BA%8E%E8%A3%85%E4%BF%AE%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95%2F</url>
    <content type="text"><![CDATA[装修风格的讨论在这个宅基地很难批准的时候，终于可以造房子了。楼房的样式是那种两层平层 + 一层别墅式的样子，虽然比不上欧式的新颖，但是空间足够大，四平八稳的风格还算能接受。对于装修风格，和瓢羹同学也有一些讨论。一开始瓢羹同学认为欧式的辉煌装修风格不错，但是我觉得有点老土。于是呢，她说北欧性冷风不错，我也觉得可以，只是美中不足的是有点暗色调，不适合居家。我呢，有点青睐于和风的风格，比较的小资。但是，作为自建房格调又显得有点小气了。所以，经过一番博弈，我们最终把两种风格进行了mix——其实我们不是一定青睐和风，亦或是北欧。后来我们发现，我们只是对原木风比较感冒。原木材质的纹理，配合较大空间的色彩搭配，整体给人一种居家的舒适感和归属感。同时，又比较有格调。要准备的工作从目前来看打的轮廓和格局已经敲定了，但是整体装修的渲染还没出来，准备抽空到酷家乐搞一波装修效果图。到时候看看整体下来的装修效果如何。装修资料酷家乐 有好几套比较合理的和风装修来自酷家乐，吊顶采用了比较简约的纯白+造型别致的灯具，这个风格我们都比较喜欢。易盖房 小别墅一些样式比较讨巧，看着比较舒服。利益相关此文涉及的资料均无利益相关。如若转载请注明出处！]]></content>
      <tags>
        <tag>酷玩</tag>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员养生秘笈]]></title>
    <url>%2F2018%2F10%2F21%2F%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%85%BB%E7%94%9F%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>程序员</tag>
        <tag>养生</tag>
        <tag>码农</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 源码阅读]]></title>
    <url>%2F2018%2F10%2F19%2Fspring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[对于spring源码的一些个人的见解！！！spring 核心代码12345参考资料：spring源码深度解析Spring版本：Spring-4.3.5-RELEASE吐槽下，老外写的东西真晕啊，像亲妈一样啰啰嗦嗦帮你考虑了各种情况，然后最好还不忘加一句：如果你不满意，还可以拓展！！！核心流程初始化过程非常清晰的模板方法，每一个步骤封装成一个具体的函数进行代理，职责清晰明了；12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273@Overridepublic void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; //预热，做准备工作 prepareRefresh(); // Tell the subclass to refresh the internal bean factory. //获取内部的bean factory ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); // Prepare the bean factory for use in this context. //预热beanFactory prepareBeanFactory(beanFactory); try &#123; // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory(beanFactory); // Invoke factory processors registered as beans in the context. //beanFactory在上下文中注册bean，核心的代码就在这里 invokeBeanFactoryPostProcessors(beanFactory); // Register bean processors that intercept bean creation. // bean创建的时候拦截并注册bean处理器，这里只创建处理器，真正的创建是在getBean(..)方法里 registerBeanPostProcessors(beanFactory); // Initialize message source for this context. // 用于支持国际化，比如一些日志的国际化匹配等； initMessageSource(); // 为上下文初始化消息传播工具 initApplicationEventMulticaster(); // Initialize other special beans in specific context subclasses. // 钩子方法：额外的beans处理方法 onRefresh(); // Check for listener beans and register them. // 注册监听器 registerListeners(); // Instantiate all remaining (non-lazy-init) singletons. // 实例化非延时加载的bean单例 finishBeanFactoryInitialization(beanFactory); // Last step: publish corresponding event. // push beans创建完成的消息 finishRefresh(); &#125; catch (BeansException ex) &#123; if (logger.isWarnEnabled()) &#123; logger.warn("Exception encountered during context initialization - " + "cancelling refresh attempt: " + ex); &#125; // Destroy already created singletons to avoid dangling resources. destroyBeans(); // Reset 'active' flag. cancelRefresh(ex); // Propagate exception to caller. throw ex; &#125; finally &#123; // Reset common introspection caches in Spring's core, since we // might not ever need metadata for singleton beans anymore... resetCommonCaches(); &#125; &#125;&#125;spring 类加载的基本类spring DefaultListableBeanFactory UML示意图：spring bean 创建过程转换beanName尝试从缓存中获取单例bean本身的实例化原型模式依赖检测parentBeanFactory 检测将gernerecBeanDefinition 转换成 RootBeanDefination寻找依赖根据scope 初始化(init)对应的bean类型转换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171/** * Return an instance, which may be shared or independent, of the specified bean. * @param name the name of the bean to retrieve * @param requiredType the required type of the bean to retrieve * @param args arguments to use when creating a bean instance using explicit arguments * (only applied when creating a new instance as opposed to retrieving an existing one) * @param typeCheckOnly whether the instance is obtained for a type check, * not for actual use * @return an instance of the bean * @throws BeansException if the bean could not be created */@SuppressWarnings(&quot;unchecked&quot;)protected &lt;T&gt; T doGetBean( final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException &#123; //转换beanName，我们知道在spring中，bean factory的名称都是类似于 &amp;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory //因此获取的时候需要进行转换 final String beanName = transformedBeanName(name); Object bean; // Eagerly check singleton cache for manually registered singletons. // 尝试从缓存中获取单例 Object sharedInstance = getSingleton(beanName); if (sharedInstance != null &amp;&amp; args == null) &#123; if (logger.isDebugEnabled()) &#123; if (isSingletonCurrentlyInCreation(beanName)) &#123; logger.debug(&quot;Returning eagerly cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos; that is not fully initialized yet - a consequence of a circular reference&quot;); &#125; else &#123; logger.debug(&quot;Returning cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;); &#125; &#125; //实例化 bean = getObjectForBeanInstance(sharedInstance, name, beanName, null); &#125; else &#123; // Fail if we&apos;re already creating this bean instance: // We&apos;re assumably within a circular reference. // 检测当前依赖的类是否正在创建，如果是，则抛出异常 if (isPrototypeCurrentlyInCreation(beanName)) &#123; throw new BeanCurrentlyInCreationException(beanName); &#125; // Check if bean definition exists in this factory. // 如果bean配置不存在则只能去父工厂找 BeanFactory parentBeanFactory = getParentBeanFactory(); if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123; // Not found -&gt; check parent. String nameToLookup = originalBeanName(name); if (args != null) &#123; // Delegation to parent with explicit args. return (T) parentBeanFactory.getBean(nameToLookup, args); &#125; else &#123; // No args -&gt; delegate to standard getBean method. return parentBeanFactory.getBean(nameToLookup, requiredType); &#125; &#125; if (!typeCheckOnly) &#123; markBeanAsCreated(beanName); &#125; try &#123; //转换并合并BeanDefinition属性 final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName); checkMergedBeanDefinition(mbd, beanName, args); // Guarantee initialization of beans that the current bean depends on. // 原型模式的bean需要循环检测依赖 防止出现A-&gt;B-&gt;A 的循环依赖情况出现 String[] dependsOn = mbd.getDependsOn(); if (dependsOn != null) &#123; for (String dep : dependsOn) &#123; if (isDependent(beanName, dep)) &#123; throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Circular depends-on relationship between &apos;&quot; + beanName + &quot;&apos; and &apos;&quot; + dep + &quot;&apos;&quot;); &#125; registerDependentBean(dep, beanName); getBean(dep); &#125; &#125; // Create bean instance. // 创建bean实例 if (mbd.isSingleton()) &#123; sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; try &#123; return createBean(beanName, mbd, args); &#125; catch (BeansException ex) &#123; // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; &#125; &#125; &#125;); bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd); &#125; else if (mbd.isPrototype()) &#123; // It&apos;s a prototype -&gt; create a new instance. Object prototypeInstance = null; try &#123; beforePrototypeCreation(beanName); prototypeInstance = createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd); &#125; else &#123; String scopeName = mbd.getScope(); final Scope scope = this.scopes.get(scopeName); if (scope == null) &#123; throw new IllegalStateException(&quot;No Scope registered for scope name &apos;&quot; + scopeName + &quot;&apos;&quot;); &#125; try &#123; Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; beforePrototypeCreation(beanName); try &#123; return createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; &#125; &#125;); bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd); &#125; catch (IllegalStateException ex) &#123; throw new BeanCreationException(beanName, &quot;Scope &apos;&quot; + scopeName + &quot;&apos; is not active for the current thread; consider &quot; + &quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;, ex); &#125; &#125; &#125; catch (BeansException ex) &#123; cleanupAfterBeanCreationFailure(beanName); throw ex; &#125; &#125; // Check if required type matches the type of the actual bean instance. // 转换bean类型 if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isAssignableFrom(bean.getClass())) &#123; try &#123; return getTypeConverter().convertIfNecessary(bean, requiredType); &#125; catch (TypeMismatchException ex) &#123; if (logger.isDebugEnabled()) &#123; logger.debug(&quot;Failed to convert bean &apos;&quot; + name + &quot;&apos; to required type &apos;&quot; + ClassUtils.getQualifiedName(requiredType) + &quot;&apos;&quot;, ex); &#125; throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass()); &#125; &#125; return (T) bean;&#125;spring事务隔离级别及事务传播实现propagation_requierd(spring的事务默认是该级别)：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112 * Create a TransactionStatus for an existing transaction. */private TransactionStatus handleExistingTransaction( TransactionDefinition definition, Object transaction, boolean debugEnabled) throws TransactionException &#123; //若为非事务方式，则抛异常 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123; throw new IllegalTransactionStateException( &quot;Existing transaction found for transaction marked with propagation &apos;never&apos;&quot;); &#125; // 若存在事务，挂起适当前事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123; if (debugEnabled) &#123; logger.debug(&quot;Suspending current transaction&quot;); &#125; // 挂起当前事务 Object suspendedResources = suspend(transaction); boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS); return prepareTransactionStatus( definition, null, false, newSynchronization, debugEnabled, suspendedResources); &#125; // 挂起当前事务，并新建事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123; if (debugEnabled) &#123; logger.debug(&quot;Suspending current transaction, creating new transaction with name [&quot; + definition.getName() + &quot;]&quot;); &#125; //挂起当前事务 SuspendedResourcesHolder suspendedResources = suspend(transaction); try &#123; boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); DefaultTransactionStatus status = newTransactionStatus( definition, transaction, true, newSynchronization, debugEnabled, suspendedResources); // 重新开启事务 doBegin(transaction, definition); prepareSynchronization(status, definition); return status; &#125; catch (RuntimeException beginEx) &#123; resumeAfterBeginException(transaction, suspendedResources, beginEx); throw beginEx; &#125; catch (Error beginErr) &#123; resumeAfterBeginException(transaction, suspendedResources, beginErr); throw beginErr; &#125; &#125; // 若当前事务存在，则嵌套执行事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123; if (!isNestedTransactionAllowed()) &#123; throw new NestedTransactionNotSupportedException( &quot;Transaction manager does not allow nested transactions by default - &quot; + &quot;specify &apos;nestedTransactionAllowed&apos; property with value &apos;true&apos;&quot;); &#125; if (debugEnabled) &#123; logger.debug(&quot;Creating nested transaction with name [&quot; + definition.getName() + &quot;]&quot;); &#125; // 判定是否支持事务备份点 if (useSavepointForNestedTransaction()) &#123; // Create savepoint within existing Spring-managed transaction, // through the SavepointManager API implemented by TransactionStatus. // Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization. DefaultTransactionStatus status = prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null); // 创建备份点 status.createAndHoldSavepoint(); return status; &#125; else &#123; // Nested transaction through nested begin and commit/rollback calls. // Usually only for JTA: Spring synchronization might get activated here // in case of a pre-existing JTA transaction. boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); DefaultTransactionStatus status = newTransactionStatus( definition, transaction, true, newSynchronization, debugEnabled, null); // 不支持备份点的情况下会新建事务 doBegin(transaction, definition); prepareSynchronization(status, definition); return status; &#125; &#125; // Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED. if (debugEnabled) &#123; logger.debug(&quot;Participating in existing transaction&quot;); &#125; if (isValidateExistingTransaction()) &#123; if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123; Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel(); if (currentIsolationLevel == null || currentIsolationLevel != definition.getIsolationLevel()) &#123; Constants isoConstants = DefaultTransactionDefinition.constants; throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; + definition + &quot;] specifies isolation level which is incompatible with existing transaction: &quot; + (currentIsolationLevel != null ? isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) : &quot;(unknown)&quot;)); &#125; &#125; if (!definition.isReadOnly()) &#123; if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123; throw new IllegalTransactionStateException(&quot;Participating transaction with definition [&quot; + definition + &quot;] is not marked as read-only but existing transaction is&quot;); &#125; &#125; &#125; boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);&#125;一些干货aop注入的实现过程doCreateBean中会暴露一个bean引用，用以处理循环引用；同时大家熟知的AOP就是通过getEarlyBeanReference(..)方法植入的；具体的，是在wrapIfNecessary(..) 方法中封装了advice并创建了代理；@Autowired注解的实现doCreateBean(..)中的populateBean(..)方法，实现了基于@Autowired注解的实现，根据名称或类型进行依赖的注入；]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>源码阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Mvc源码阅读]]></title>
    <url>%2F2018%2F10%2F19%2Fspringmvc%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[对springMVC的一些思考!!!Spring Mvc源码阅读12345678910111213SpringMVC核心处理流程：1、DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器2、HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）3、HandlerAdapter处理器适配器，请求数据绑定和转换，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）4、ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图5、然后再将Model模型中的数据渲染到View上这些过程都是以DispatcherServlet为中轴线进行的。入口源码springMVC的请求会交由dispatcherServlet处理，其本质上是一个多线程的请求处理机制；核心业务逻辑被设计在doDispatcher(..)方法中；123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100/** * Process the actual dispatching to the handler. * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order. * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters * to find the first that supports the handler class. * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers * themselves to decide which methods are acceptable. * @param request current HTTP request * @param response current HTTP response * @throws Exception in case of any kind of processing failure */protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; HttpServletRequest processedRequest = request; HandlerExecutionChain mappedHandler = null; boolean multipartRequestParsed = false; WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request); try &#123; ModelAndView mv = null; Exception dispatchException = null; try &#123; processedRequest = checkMultipart(request); multipartRequestParsed = (processedRequest != request); // 绑定url -&gt; 具体的handler/Controller.method(..) // Determine handler for the current request. mappedHandler = getHandler(processedRequest); if (mappedHandler == null || mappedHandler.getHandler() == null) &#123; noHandlerFound(processedRequest, response); return; &#125; // 根据handler绑定具体的adapter // Determine handler adapter for the current request. HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler()); // Process last-modified header, if supported by the handler. String method = request.getMethod(); boolean isGet = "GET".equals(method); if (isGet || "HEAD".equals(method)) &#123; long lastModified = ha.getLastModified(request, mappedHandler.getHandler()); if (logger.isDebugEnabled()) &#123; logger.debug("Last-Modified value for [" + getRequestUri(request) + "] is: " + lastModified); &#125; if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123; return; &#125; &#125; // interceptor 拦截器进行前置预处理 if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123; return; &#125; // 在handle方法中进行了请求数据的绑定，方法invoke，返回model的处理和封装等 // Actually invoke the handler. mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); if (asyncManager.isConcurrentHandlingStarted()) &#123; return; &#125; applyDefaultViewName(processedRequest, mv); mappedHandler.applyPostHandle(processedRequest, response, mv); &#125; catch (Exception ex) &#123; dispatchException = ex; &#125; catch (Throwable err) &#123; // As of 4.3, we're processing Errors thrown from handler methods as well, // making them available for @ExceptionHandler methods and other scenarios. dispatchException = new NestedServletException("Handler dispatch failed", err); &#125; processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException); &#125; catch (Exception ex) &#123; triggerAfterCompletion(processedRequest, response, mappedHandler, ex); &#125; catch (Throwable err) &#123; triggerAfterCompletion(processedRequest, response, mappedHandler, new NestedServletException("Handler processing failed", err)); &#125; finally &#123; if (asyncManager.isConcurrentHandlingStarted()) &#123; // Instead of postHandle and afterCompletion if (mappedHandler != null) &#123; mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response); &#125; &#125; else &#123; // Clean up any resources used by a multipart request. if (multipartRequestParsed) &#123; cleanupMultipart(processedRequest); &#125; &#125; &#125;&#125;核心关注的几个问题请求如何路由到具体的Controller上的方法进行处理?根据请求路径，与已知的handlerMapping进行匹配，并加入interceptors:dispatcherServlet.getHandler()最终调用AbstracteHandlerMapping.getHandlerExecutionChain(..)中进行url与handlerMapping进行匹配，并加入interceptors;扁平化的前端请求数据如何进行数据绑定？我们知道，前端的get/post等请求，会被requestServlet接受，并封装成HttpServletRequest的parameterMap中，每一项请求的数据结构都是 K-V 形的。而我们知道，像这样的形式，那么在这个中间数据如何实现数据绑定到Bean，String格式的Value 转换成各种目标格式。事实上，spring MVC将整个网络请求的处理流程进行了合理的切分,其大致的处理流程如下：12345678910111.调用匹配到的adapter.handle(..)2.然后调用invokeAndHandle(..)3.调用invokeForRequest(..)获取getMethodArgumentValues(..)获取和绑定入参;4.在具体的方法中，获取支持处理的argumentResolvers,然后调用resolveArgument(..)方法;5.在ModelAttributeMethodProcessor中调用bindRequestParameters(binder, webRequest),方法，然后再调用bind()进行bean参数的绑定；6.调用binder.convertIfNecessary(arg, parameter.getParameterType(), parameter)方法进行参数的转换；]]></content>
      <tags>
        <tag>Spring MVC</tag>
        <tag>Spring</tag>
        <tag>源码阅读</tag>
      </tags>
  </entry>
</search>
