<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小程序日记--界面改版]]></title>
    <url>%2F2018%2F12%2F05%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0-%E7%95%8C%E9%9D%A2%E6%94%B9%E7%89%88%2F</url>
    <content type="text"><![CDATA[关于小程序的一些记录功能改进依托于小程序的云函数，降请求交由云函数封装和执行；后期考虑加入bing的历史图片和one一个的历史句子；天气界面后期考虑加入更多动画效果，整体更加美观；字体排版现在还是比较凌乱的，所以应该找个css来美化一下的；截图]]></content>
      <tags>
        <tag>小程序</tag>
        <tag>bing</tag>
        <tag>一个</tag>
        <tag>one</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[装修收藏盒]]></title>
    <url>%2F2018%2F11%2F16%2F%E8%A3%85%E4%BF%AE%E6%94%B6%E8%97%8F%E7%9B%92%2F</url>
    <content type="text"><![CDATA[即将装修了，所以收藏一些实用的装修资料…装修布置如何将家里布置的温馨]]></content>
      <tags>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高中三年，等你下课]]></title>
    <url>%2F2018%2F11%2F12%2F%E9%AB%98%E4%B8%AD%E4%B8%89%E5%B9%B4%EF%BC%8C%E7%AD%89%E4%BD%A0%E4%B8%8B%E8%AF%BE%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>脑洞</tag>
        <tag>周杰伦</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用命令大乱炖]]></title>
    <url>%2F2018%2F11%2F08%2F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E4%B9%B1%E7%82%96%2F</url>
    <content type="text"><![CDATA[命令行这个东西，就像考试一样，书到用时方恨少。所以，平时积累一些常用的命令行和脚本zookeeper命令zkCli命令1$ zkCli -timeout 5000 -server 127.0.0.1:2181zkServer命令1234567891011121314$ zkServer JMX enabled by defaultUsing config: /usr/local/etc/zookeeper/zoo.cfgUsage: ./zkServer.sh &#123;start|start-foreground|stop|restart|status|upgrade|print-cmd&#125;$ zkServer statusJMX enabled by defaultUsing config: /usr/local/etc/zookeeper/zoo.cfgError contacting service. It is probably not running.$ zkServer startJMX enabled by defaultUsing config: /usr/local/etc/zookeeper/zoo.cfgStarting zookeeper ... STARTED]]></content>
      <tags>
        <tag>shell</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql萌新入门指南]]></title>
    <url>%2F2018%2F11%2F04%2Fmysql%E8%90%8C%E6%96%B0%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[这里是萌新入门指南，瓢羹同学戳这里&gt;&gt;&gt;-- 插入 INSERT INTO `test-db`.`tb_student` ( `student_name`, `student_no`, `studnet_gender`, `favorite_course` ) VALUES ( 'tomb', 'no.11', '女', '1' ); -- 修改 update `test-db`.`tb_student` set `favorite_course` = '2',`student_name` = 'tombb' where `student_name` like '%b%'; -- 查询 select * from `test-db`.`tb_student` WHERE `student_no` = 'no.11'; select * from `test-db`.`tb_student` WHERE `student_name` = 'tombb'; -- 查询排序 -- asc: ascend的缩写，表示升序 select * from `test-db`.`tb_student` where `studnet_gender` = '男' order by `student_no` asc; -- desc: 表示降序 -- 字符默认按照从左往右的ascii顺序进行排序的 select * from `test-db`.tb_student where `studnet_gender` = '女' order by `student_no` desc; -- 删除 delete from `test-db`.`tb_student` where `student_name` = 'tombb'; -- 找出所有姓张的学生名字 select `student_name` as '学生姓名' from `test-db`.`tb_student` where `student_name` like '张%'; -- 联表查询 学生名称-&gt;课程名称 -- 注意：1.联表查询时，查询连接关键字为 “on”，单表查询连接关键字为 “where”。 -- 2.联表查询时，on后面可以再接where关键字，进行外表的进一步查询 select ts.`student_name`,tc.`course_name` from `tb_student` as ts inner join `tb_course` tc on ts.`favorite_course` = tc.`id`; -- 联表查询 学生名称-&gt;性别（男）-&gt;课程名称,查询条件并列的情况用 or，串联条件用 and。 -- 第一种：条件全写在on 之后的语句中 SELECT ts.`student_name` as '姓名', ts.`studnet_gender` as '性别', tc.`course_name` as '课程名称' FROM tb_student AS ts INNER JOIN `tb_course` tc ON ts.`favorite_course` = tc.`id` and ts.`studnet_gender` = '男'; -- 第二种，where 和 on 一起用,推荐用这种，因为事先先把主表符合要求的结果筛选出来，再与附表匹配，性能更好！ SELECT ts.`student_name` as '姓名', ts.`studnet_gender` as '性别', tc.`course_name` as '课程名称' FROM `tb_student` AS ts INNER JOIN `tb_course` tc ON ts.`favorite_course` = tc.`id` where ts.`studnet_gender` = '男'; -- 统计所有课程被学生喜欢的数量: 课程名称 -&gt; 数量 select tc.`course_name` as '课程名称', count(ts.`id`) as '数量' from `tb_course` as tc LEFT JOIN `tb_student` as ts on tc.`id` = ts.`favorite_course` GROUP BY tc.`id`; -- 这个例子有点难，所以我们先来安利一下 group by -- 根据性别统计学生数量 select `studnet_gender` as '性别', count(`studnet_gender`) as '数量' from `tb_student` GROUP BY `studnet_gender`; select sum( case when `studnet_gender` = '男' then 1 else 0 end ) as '男生数量', sum(case when `studnet_gender` = '女' then 1 else 0 end ) as '女生数量' from `tb_student` ;]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[周末遐思]]></title>
    <url>%2F2018%2F10%2F29%2F%E5%91%A8%E6%9C%AB%E9%81%90%E6%80%9D%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>脑洞</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那些令人捧腹的梗]]></title>
    <url>%2F2018%2F10%2F26%2F%E9%82%A3%E4%BA%9B%E4%BB%A4%E4%BA%BA%E6%8D%A7%E8%85%B9%E7%9A%84%E6%A2%97%2F</url>
    <content type="text"><![CDATA[关于程序员的老梗金庸小说人物英文名，你能猜对几个]]></content>
      <tags>
        <tag>脑洞</tag>
        <tag>搞笑</tag>
        <tag>梗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elastic-job源码浅析-源码分析]]></title>
    <url>%2F2018%2F10%2F25%2Felastic-job%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[核心源码分析核心入口：JobScheduler作业调度器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * 作业调度器. * * @author zhangliang * @author caohao */public class JobScheduler &#123; private static final String SCHEDULER_INSTANCE_NAME_SUFFIX = "Scheduler"; private static final String CRON_TRIGGER_IDENTITY_SUFFIX = "Trigger"; //作业启动器 private final JobExecutor jobExecutor; public JobScheduler(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final ElasticJobListener... elasticJobListeners) &#123; jobExecutor = new JobExecutor(regCenter, jobConfig, elasticJobListeners); &#125; /** * 初始化作业. */ public void init() &#123; //作业启动器初始化 jobExecutor.init(); //建造者模式构造jobDetail JobDetail jobDetail = JobBuilder.newJob(LiteJob.class).withIdentity(jobExecutor.getJobName()).build(); //保留job的状态信息 jobDetail.getJobDataMap().put("elasticJob", jobExecutor.getElasticJob()); JobScheduleController jobScheduleController; try &#123; //实例化作业调度控制器 jobScheduleController = new JobScheduleController( initializeScheduler(jobDetail.getKey().toString()), jobDetail, jobExecutor.getSchedulerFacade(), Joiner.on("_").join(jobExecutor.getJobName(), CRON_TRIGGER_IDENTITY_SUFFIX)); jobScheduleController.scheduleJob(jobExecutor.getSchedulerFacade().getCron()); &#125; catch (final SchedulerException ex) &#123; throw new JobException(ex); &#125; //向作业注册表注册JobScheduleController实例 JobRegistry.getInstance().addJobScheduleController(jobExecutor.getJobName(), jobScheduleController); &#125; private Scheduler initializeScheduler(final String jobName) throws SchedulerException &#123; //工厂方法构造quartz的Scheduler实例 StdSchedulerFactory factory = new StdSchedulerFactory(); factory.initialize(getBaseQuartzProperties(jobName)); Scheduler result = factory.getScheduler(); //注册Trigger监听事件 result.getListenerManager().addTriggerListener(jobExecutor.getSchedulerFacade().newJobTriggerListener()); return result; &#125; private Properties getBaseQuartzProperties(final String jobName) &#123; Properties result = new Properties(); result.put("org.quartz.threadPool.class", org.quartz.simpl.SimpleThreadPool.class.getName()); //并发执行线程数为1，意味着job任务同步执行，防止同一个任务执行时间过长被多次执行 result.put("org.quartz.threadPool.threadCount", "1"); result.put("org.quartz.scheduler.instanceName", Joiner.on("_").join(jobName, SCHEDULER_INSTANCE_NAME_SUFFIX)); if (!jobExecutor.getSchedulerFacade().isMisfire()) &#123; result.put("org.quartz.jobStore.misfireThreshold", "1"); &#125; prepareEnvironments(result); return result; &#125; //钩子方法，用于子类覆盖 protected void prepareEnvironments(final Properties props) &#123; &#125; &#125;作业启动器的init方法1234567891011121314151617181920212223242526272829303132333435363738/** * JobExecutor * 初始化作业. */ public void init() &#123; log.debug("Elastic job: job controller init, job name is: &#123;&#125;.", jobName); //清除上次secheduler的信息 schedulerFacade.clearPreviousServerStatus(); //向注册中心注册当前job regCenter.addCacheData("/" + jobName); //门面类执行具体业务初始化工作 schedulerFacade.registerStartUpInfo(); &#125; /** * SchedulerFacade门面类 * 注册Elastic-Job启动信息. */ public void registerStartUpInfo() &#123; //启动所有监听事件 listenerManager.startAllListeners(); //强制主节点选举 leaderElectionService.leaderForceElection(); //持久化分布式作业配置信息 configService.persistJobConfiguration(); //持久化作业服务器上线相关信息 serverService.persistServerOnline(); //清除暂停作业的标记 serverService.clearJobPausedStatus(); if (JobType.DATA_FLOW == configService.getJobType()) &#123; //异步开启定时批量统计处理数据数量的作业 statisticsService.startProcessCountJob(); &#125; //设置需要重新分片的标记 shardingService.setReshardingFlag(); //初始化作业监听服务 monitorService.listen(); &#125;作业注册表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * 作业注册表. * * @author zhangliang * @author caohao *///多线程双检锁：保证单例线程安全@NoArgsConstructor(access = AccessLevel.PRIVATE)public final class JobRegistry &#123; //为什么要用volatile关键字？ private static volatile JobRegistry instance; //全局的作业被以map形式缓存在注册表单例中 private Map&lt;String, JobScheduleController&gt; schedulerMap = new ConcurrentHashMap&lt;&gt;(); /** * 获取作业注册表实例. * * @return 作业注册表实例 */ public static JobRegistry getInstance() &#123; if (null == instance) &#123; synchronized (JobRegistry.class) &#123; if (null == instance) &#123; //实际上实例化分为分配内存和执行构造方法两部分，如果不加volatile，会导致指令重排序，导致构造方法先被执行。 //而另一个线程到达临界区代码段，从而获取到一个未被完全实例化的instance。 instance = new JobRegistry(); &#125; &#125; &#125; return instance; &#125; /** * 添加作业调度控制器. * * @param jobName 作业名称 * @param jobScheduleController 作业调度控制器 */ public void addJobScheduleController(final String jobName, final JobScheduleController jobScheduleController) &#123; schedulerMap.put(jobName, jobScheduleController); &#125; /** * 获取作业调度控制器. * * @param jobName 作业名称 * @return 作业调度控制器 */ public JobScheduleController getJobScheduleController(final String jobName) &#123; return schedulerMap.get(jobName); &#125;&#125;JobExecutor作业启动器1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/** * 作业启动器. * * @author zhangliang */@Slf4j@Getterpublic class JobExecutor &#123; private final String jobName; //分布式注册中心 private final CoordinatorRegistryCenter regCenter; //作业具体执行器 private final ElasticJob elasticJob; //为调度器提供内部服务的门面类 private final SchedulerFacade schedulerFacade; /** * 初始化作业. */ public void init() &#123; log.debug("Elastic job: job controller init, job name is: &#123;&#125;.", jobName); //清楚上次作业状态信息 schedulerFacade.clearPreviousServerStatus(); //向注册中心注册当前任务 regCenter.addCacheData("/" + jobName); //注册Elastic-Job启动信息 schedulerFacade.registerStartUpInfo(); &#125; public JobExecutor(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final ElasticJobListener... elasticJobListeners) &#123; jobName = jobConfig.getJobName(); this.regCenter = regCenter; List&lt;ElasticJobListener&gt; elasticJobListenerList = Arrays.asList(elasticJobListeners); setGuaranteeServiceForElasticJobListeners(regCenter, jobConfig, elasticJobListenerList); elasticJob = createElasticJob(jobConfig, elasticJobListenerList); schedulerFacade = new SchedulerFacade(regCenter, jobConfig, elasticJobListenerList); &#125; private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final List&lt;ElasticJobListener&gt; elasticJobListeners) &#123; GuaranteeService guaranteeService = new GuaranteeService(regCenter, jobConfig); for (ElasticJobListener each : elasticJobListeners) &#123; if (each instanceof AbstractDistributeOnceElasticJobListener) &#123; ((AbstractDistributeOnceElasticJobListener) each).setGuaranteeService(guaranteeService); &#125; &#125; &#125; private ElasticJob createElasticJob(final JobConfiguration jobConfig, final List&lt;ElasticJobListener&gt; elasticJobListenerList) &#123; ElasticJob result; try &#123; result = (ElasticJob) jobConfig.getJobClass().newInstance(); &#125; catch (final InstantiationException | IllegalAccessException ex) &#123; throw new JobException(ex); &#125; result.setJobFacade(new JobFacade(regCenter, jobConfig, elasticJobListenerList)); return result; &#125;&#125;注册中心模块123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657@Override public void init() &#123; //如果开关开启，则启动zk内部服务器，提供job节点注册服务 if (zkConfig.isUseNestedZookeeper()) &#123; NestedZookeeperServers.getInstance().startServerIfNotStarted(zkConfig.getNestedPort(), zkConfig.getNestedDataDir()); &#125; log.debug("Elastic job: zookeeper registry center init, server lists is: &#123;&#125;.", zkConfig.getServerLists()); //创建zk连接客户端 Builder builder = CuratorFrameworkFactory.builder() .connectString(zkConfig.getServerLists()) .retryPolicy(new ExponentialBackoffRetry( zkConfig.getBaseSleepTimeMilliseconds(), zkConfig.getMaxRetries(), zkConfig.getMaxSleepTimeMilliseconds())) .namespace(zkConfig.getNamespace()); if (0 != zkConfig.getSessionTimeoutMilliseconds()) &#123; builder.sessionTimeoutMs(zkConfig.getSessionTimeoutMilliseconds()); &#125; if (0 != zkConfig.getConnectionTimeoutMilliseconds()) &#123; builder.connectionTimeoutMs(zkConfig.getConnectionTimeoutMilliseconds()); &#125; //根据配置，开启权限验证 if (!Strings.isNullOrEmpty(zkConfig.getDigest())) &#123; builder.authorization("digest", zkConfig.getDigest().getBytes(Charset.forName("UTF-8"))) .aclProvider(new ACLProvider() &#123; @Override public List&lt;ACL&gt; getDefaultAcl() &#123; return ZooDefs.Ids.CREATOR_ALL_ACL; &#125; @Override public List&lt;ACL&gt; getAclForPath(final String path) &#123; return ZooDefs.Ids.CREATOR_ALL_ACL; &#125; &#125;); &#125; client = builder.build(); client.start(); try &#123; //客户端锁定并尝试连接注册中心 client.blockUntilConnected(zkConfig.getMaxSleepTimeMilliseconds() * zkConfig.getMaxRetries(), TimeUnit.MILLISECONDS); if (!client.getZookeeperClient().isConnected()) &#123; throw new KeeperException.OperationTimeoutException(); &#125; if (!Strings.isNullOrEmpty(zkConfig.getLocalPropertiesPath())) &#123; //根据路径读取配置文件，并创建节点 fillData(); &#125; //CHECKSTYLE:OFF &#125; catch (final Exception ex) &#123; //CHECKSTYLE:ON RegExceptionHandler.handleException(ex); &#125; &#125;plugin模块中的三种作业类型elastic-job提供了三种类型的作业：Simple类型作业、Dataflow类型作业、Script类型作业。这里主要讲解前两者。Script类型作业意为脚本类型作业，支持shell，python，perl等所有类型脚本，使用不多，可以参见github文档。SimpleJob需要实现SimpleJob接口，意为简单实现，未经过任何封装，与quartz原生接口相似，比如示例代码中所使用的job。12345678910111213141516171819202122232425/** * 简单的分布式作业. * * &lt;p&gt; * 仅保证作业可被分布式定时调用, 不提供任何作业处理逻辑. * &lt;/p&gt; * * @author zhangliang * @author caohao */@Slf4jpublic abstract class AbstractSimpleElasticJob extends AbstractElasticJob &#123; @Override protected final void executeJob(final JobExecutionMultipleShardingContext shardingContext) &#123; process(shardingContext); &#125; /** * 执行作业. * * @param shardingContext 作业分片规则配置上下文 */ public abstract void process(final JobExecutionMultipleShardingContext shardingContext);&#125;Dataflow类型用于处理数据流，需实现DataflowJob接口。该接口提供2个方法可供覆盖，分别用于抓取(fetchData)和处理(processData)数据。可通过DataflowJobConfiguration配置是否流式处理。流式处理数据只有fetchData方法的返回值为null或集合长度为空时，作业才停止抓取，否则作业将一直运行下去； 非流式处理数据则只会在每次作业执行过程中执行一次fetchData方法和processData方法，随即完成本次作业。实际开发中，Dataflow类型的job还是很有好用的。12345678910111213141516171819202122232425262728293031323334353637383940/** * 保证同一分片顺序性的批量处理数据流程的作业. * * @author zhangliang * * @param &lt;T&gt; 数据流作业处理的数据实体类型 */public abstract class AbstractBatchSequenceDataFlowElasticJob&lt;T&gt; extends AbstractBatchDataFlowElasticJob&lt;T, JobExecutionSingleShardingContext&gt; &#123;&#125;/** * 高吞吐量批量处理数据流程的作业. * * @author zhangliang * * @param &lt;T&gt; 数据流作业处理的数据实体类型 */public abstract class AbstractBatchThroughputDataFlowElasticJob&lt;T&gt; extends AbstractBatchDataFlowElasticJob&lt;T, JobExecutionMultipleShardingContext&gt; &#123;&#125;/** * 保证同一分片顺序性的逐条处理数据流程的作业. * * @author zhangliang * * @param &lt;T&gt; 数据流作业处理的数据实体类型 */public abstract class AbstractIndividualSequenceDataFlowElasticJob&lt;T&gt; extends AbstractIndividualDataFlowElasticJob&lt;T, JobExecutionSingleShardingContext&gt; &#123;&#125;/** * 高吞吐量逐条处理数据流程的作业. * * @author zhangliang * * @param &lt;T&gt; 数据流作业处理的数据实体类型 */public abstract class AbstractIndividualThroughputDataFlowElasticJob&lt;T&gt; extends AbstractIndividualDataFlowElasticJob&lt;T, JobExecutionMultipleShardingContext&gt; &#123;&#125;plugin中的分片策略AverageAllocationJobShardingStrategy：基于平均分配算法的分片策略；OdevitySortByNameJobShardingStrategy：根据作业名的哈希值奇偶数决定IP升降序算法的分片策略；RotateServerByNameJobShardingStrategy：根据作业名的哈希值对服务器列表进行轮转的分片策略；12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * 基于平均分配算法的分片策略. * * &lt;p&gt; * 如果分片不能整除, 则不能整除的多余分片将依次追加到序号小的服务器. * 如: * 1. 如果有3台服务器, 分成9片, 则每台服务器分到的分片是: 1=[0,1,2], 2=[3,4,5], 3=[6,7,8]. * 2. 如果有3台服务器, 分成8片, 则每台服务器分到的分片是: 1=[0,1,6], 2=[2,3,7], 3=[4,5]. * 3. 如果有3台服务器, 分成10片, 则每台服务器分到的分片是: 1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8]. * &lt;/p&gt; * * @author zhangliang */public final class AverageAllocationJobShardingStrategy implements JobShardingStrategy &#123; @Override public Map&lt;String, List&lt;Integer&gt;&gt; sharding(final List&lt;String&gt; serversList, final JobShardingStrategyOption option) &#123; if (serversList.isEmpty()) &#123; return Collections.emptyMap(); &#125; Map&lt;String, List&lt;Integer&gt;&gt; result = shardingAliquot(serversList, option.getShardingTotalCount()); addAliquant(serversList, option.getShardingTotalCount(), result); return result; &#125; //平均分配前面若干项 private Map&lt;String, List&lt;Integer&gt;&gt; shardingAliquot(final List&lt;String&gt; serversList, final int shardingTotalCount) &#123; Map&lt;String, List&lt;Integer&gt;&gt; result = new LinkedHashMap&lt;&gt;(serversList.size()); int itemCountPerSharding = shardingTotalCount / serversList.size(); int count = 0; for (String each : serversList) &#123; List&lt;Integer&gt; shardingItems = new ArrayList&lt;&gt;(itemCountPerSharding + 1); for (int i = count * itemCountPerSharding; i &lt; (count + 1) * itemCountPerSharding; i++) &#123; shardingItems.add(i); &#125; result.put(each, shardingItems); count++; &#125; return result; &#125; //追加不能整除的分片索引 private void addAliquant(final List&lt;String&gt; serversList, final int shardingTotalCount, final Map&lt;String, List&lt;Integer&gt;&gt; shardingResult) &#123; int aliquant = shardingTotalCount % serversList.size(); int count = 0; for (Entry&lt;String, List&lt;Integer&gt;&gt; entry : shardingResult.entrySet()) &#123; if (count &lt; aliquant) &#123; entry.getValue().add(shardingTotalCount / serversList.size() * serversList.size() + count); &#125; count++; &#125; &#125;&#125;123456789101112131415161718192021222324252627/** * 根据作业名的哈希值奇偶数决定IP升降序算法的分片策略. * * &lt;p&gt; * 作业名的哈希值为奇数则IP升序. * 作业名的哈希值为偶数则IP降序. * 用于不同的作业平均分配负载至不同的服务器. * 如: * 1. 如果有3台服务器, 分成2片, 作业名称的哈希值为奇数, 则每台服务器分到的分片是: 1=[0], 2=[1], 3=[]. * 2. 如果有3台服务器, 分成2片, 作业名称的哈希值为偶数, 则每台服务器分到的分片是: 3=[0], 2=[1], 1=[]. * &lt;/p&gt; * * @author zhangliang */public final class OdevitySortByNameJobShardingStrategy implements JobShardingStrategy &#123; private AverageAllocationJobShardingStrategy averageAllocationJobShardingStrategy = new AverageAllocationJobShardingStrategy(); @Override public Map&lt;String, List&lt;Integer&gt;&gt; sharding(final List&lt;String&gt; serversList, final JobShardingStrategyOption option) &#123; long jobNameHash = option.getJobName().hashCode(); if (0 == jobNameHash % 2) &#123; Collections.reverse(serversList); &#125; return averageAllocationJobShardingStrategy.sharding(serversList, option); &#125;&#125;1234567891011121314151617181920212223242526272829/** * 根据作业名的哈希值对服务器列表进行轮转的分片策略. * 向左偏移offset位之后进行平均分配 * * @author weishubin */public class RotateServerByNameJobShardingStrategy implements JobShardingStrategy &#123; private AverageAllocationJobShardingStrategy averageAllocationJobShardingStrategy = new AverageAllocationJobShardingStrategy(); @Override public Map&lt;String, List&lt;Integer&gt;&gt; sharding(final List&lt;String&gt; serversList, final JobShardingStrategyOption option) &#123; return averageAllocationJobShardingStrategy.sharding(rotateServerList(serversList, option.getJobName()), option); &#125; private List&lt;String&gt; rotateServerList(final List&lt;String&gt; serversList, final String jobName) &#123; int serverSize = serversList.size(); int offset = Math.abs(jobName.hashCode()) % serverSize; if (0 == offset) &#123; return serversList; &#125; List&lt;String&gt; result = new ArrayList&lt;&gt;(serverSize); for (int i = 0; i &lt; serverSize; i++) &#123; int index = (i + offset) % serverSize; result.add(serversList.get(index)); &#125; return result; &#125;&#125;]]></content>
      <tags>
        <tag>源码</tag>
        <tag>elastic-job</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elastic-job源码浅析-任务执行过程]]></title>
    <url>%2F2018%2F10%2F25%2Felastic-job%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90-%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[启动过程流程图流程图详细地描述了各个作业细节的执行过程，看上去流程非常复杂，其主要的功能点为：判断作业是否可执行，判断作业是否分片执行，作业执行状态监听，作业失效转移等。下面我们结合代码一步步窥探他的执行过程。核心源码分析作业入口123456789101112131415/** * Elastic Job Lite提供的Quartz封装作业. * * @author zhangliang */public class LiteJob implements Job &#123; @Setter private ElasticJob elasticJob; @Override public void execute(final JobExecutionContext context) throws JobExecutionException &#123; elasticJob.execute(); &#125;&#125;LiteJob实现了Quartz的Job接口，并且持有elasticJob的实现类，通过代理的方式实现了ElasticJob与Quartz的无缝衔接；【亮点】这是一种典型的代理模式，其好处在于体验上完全与Quartz的Job一致，并且遵循了代码的开闭原则，使得代码具有很好地拓展性：例如ElasticJob接口有SimpleJob，DataFlowJob或者用户自定义的多种实现类，因此具有很好地拓展性。AbstractElasticJob抽象类及其原理12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091/** * 弹性化分布式作业的基类. * * @author zhangliang * @author caohao */@Slf4jpublic abstract class AbstractElasticJob implements ElasticJob &#123; //具体的业务实现放在jobFacade门面类中实现，简化代码复杂度 private JobFacade jobFacade; @Override public final void execute() &#123; log.trace("Elastic job: job execute begin."); //判断与注册中心时间差是否在允许范围内 jobFacade.checkMaxTimeDiffSecondsTolerable(); //获取分片上下文 JobExecutionMultipleShardingContext shardingContext = jobFacade.getShardingContext(); //若前面的任务仍在执行，则设置错过执行标记，延迟执行 if (jobFacade.misfireIfNecessary(shardingContext.getShardingItems())) &#123; log.debug("Elastic job: previous job is still running, new job will start after previous job completed. Misfired job had recorded."); return; &#125; //清除作业上次执行的信息 jobFacade.cleanPreviousExecutionInfo(); try &#123; //各监听器执行job执行前方法 jobFacade.beforeJobExecuted(shardingContext); //CHECKSTYLE:OFF &#125; catch (final Throwable cause) &#123; //CHECKSTYLE:ON handleJobExecutionException(new JobException(cause)); &#125; //执行具体的job业务逻辑 executeJobInternal(shardingContext); log.trace("Elastic job: execute normal completed, sharding context:&#123;&#125;.", shardingContext); while (jobFacade.isExecuteMisfired(shardingContext.getShardingItems())) &#123; log.trace("Elastic job: execute misfired job, sharding context:&#123;&#125;.", shardingContext); jobFacade.clearMisfire(shardingContext.getShardingItems()); executeJobInternal(shardingContext); log.trace("Elastic job: misfired job completed, sharding context:&#123;&#125;.", shardingContext); &#125; //按需失效转移 jobFacade.failoverIfNecessary(); try &#123; //执行监听后事件 jobFacade.afterJobExecuted(shardingContext); //CHECKSTYLE:OFF &#125; catch (final Throwable cause) &#123; //CHECKSTYLE:ON handleJobExecutionException(new JobException(cause)); &#125; log.trace("Elastic job: execute all completed."); &#125; private void executeJobInternal(final JobExecutionMultipleShardingContext shardingContext) &#123; if (shardingContext.getShardingItems().isEmpty()) &#123; log.trace("Elastic job: sharding item is empty, job execution context:&#123;&#125;.", shardingContext); return; &#125; //注册任务执行信息 jobFacade.registerJobBegin(shardingContext); try &#123; executeJob(shardingContext); //CHECKSTYLE:OFF &#125; catch (final Throwable cause) &#123; //CHECKSTYLE:ON handleJobExecutionException(new JobException(cause)); &#125; finally &#123; // TODO 考虑增加作业失败的状态，并且考虑如何处理作业失败的整体回路 jobFacade.registerJobCompleted(shardingContext); &#125; &#125; protected abstract void executeJob(final JobExecutionMultipleShardingContext shardingContext); @Override public void handleJobExecutionException(final JobException jobException) &#123; log.error("Elastic job: exception occur in job processing...", jobException.getCause()); &#125; @Override public final JobFacade getJobFacade() &#123; return jobFacade; &#125; @Override public final void setJobFacade(final JobFacade jobFacade) &#123; this.jobFacade = jobFacade; &#125;【亮点】外观模式传送门上面的代码中应用到了外观模式（Facade），AbstractElasticJob持有jobFacade对象，Elasticjob负责统筹整体的job执行流程但无需关注业务的具体实现，转而将复杂的业务处理逻辑交由jobFacade中的方法进行处理，从而将job与具体的业务逻辑抽离出来方便阅读和拓展。]]></content>
      <tags>
        <tag>源码</tag>
        <tag>elastic-job</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elastic-job源码浅析-任务初始化]]></title>
    <url>%2F2018%2F10%2F25%2Felastic-job%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90-%E4%BB%BB%E5%8A%A1%E5%88%9D%E5%A7%8B%E5%8C%96%2F</url>
    <content type="text"><![CDATA[作业过程源码分析核心入口：JobScheduler作业调度器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * 作业调度器. * * @author zhangliang * @author caohao */public class JobScheduler &#123; private static final String SCHEDULER_INSTANCE_NAME_SUFFIX = "Scheduler"; private static final String CRON_TRIGGER_IDENTITY_SUFFIX = "Trigger"; //作业启动器 private final JobExecutor jobExecutor; public JobScheduler(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final ElasticJobListener... elasticJobListeners) &#123; jobExecutor = new JobExecutor(regCenter, jobConfig, elasticJobListeners); &#125; /** * 初始化作业. */ public void init() &#123; //作业启动器初始化 jobExecutor.init(); //建造者模式构造jobDetail JobDetail jobDetail = JobBuilder.newJob(LiteJob.class).withIdentity(jobExecutor.getJobName()).build(); //保留job的状态信息 jobDetail.getJobDataMap().put("elasticJob", jobExecutor.getElasticJob()); JobScheduleController jobScheduleController; try &#123; //实例化作业调度控制器 jobScheduleController = new JobScheduleController( initializeScheduler(jobDetail.getKey().toString()), jobDetail, jobExecutor.getSchedulerFacade(), Joiner.on("_").join(jobExecutor.getJobName(), CRON_TRIGGER_IDENTITY_SUFFIX)); jobScheduleController.scheduleJob(jobExecutor.getSchedulerFacade().getCron()); &#125; catch (final SchedulerException ex) &#123; throw new JobException(ex); &#125; //向作业注册表注册JobScheduleController实例 JobRegistry.getInstance().addJobScheduleController(jobExecutor.getJobName(), jobScheduleController); &#125; private Scheduler initializeScheduler(final String jobName) throws SchedulerException &#123; //工厂方法构造quartz的Scheduler实例 StdSchedulerFactory factory = new StdSchedulerFactory(); factory.initialize(getBaseQuartzProperties(jobName)); Scheduler result = factory.getScheduler(); //注册Trigger监听事件 result.getListenerManager().addTriggerListener(jobExecutor.getSchedulerFacade().newJobTriggerListener()); return result; &#125; private Properties getBaseQuartzProperties(final String jobName) &#123; Properties result = new Properties(); result.put("org.quartz.threadPool.class", org.quartz.simpl.SimpleThreadPool.class.getName()); //并发执行线程数为1，意味着job任务同步执行，防止同一个任务执行时间过长被重复执行 result.put("org.quartz.threadPool.threadCount", "1"); result.put("org.quartz.scheduler.instanceName", Joiner.on("_").join(jobName, SCHEDULER_INSTANCE_NAME_SUFFIX)); if (!jobExecutor.getSchedulerFacade().isMisfire()) &#123; result.put("org.quartz.jobStore.misfireThreshold", "1"); &#125; prepareEnvironments(result); return result; &#125; //钩子方法，用于子类覆盖 protected void prepareEnvironments(final Properties props) &#123; &#125; &#125;JobExecutor作业启动器1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/** * 作业启动器. * * @author zhangliang */@Slf4j@Getterpublic class JobExecutor &#123; private final String jobName; //分布式注册中心 private final CoordinatorRegistryCenter regCenter; //作业具体执行器 private final ElasticJob elasticJob; //为调度器提供内部服务的门面类 private final SchedulerFacade schedulerFacade; /** * 初始化作业. */ public void init() &#123; log.debug("Elastic job: job controller init, job name is: &#123;&#125;.", jobName); //清楚上次作业状态信息 schedulerFacade.clearPreviousServerStatus(); //向注册中心注册当前任务 regCenter.addCacheData("/" + jobName); //注册Elastic-Job启动信息 schedulerFacade.registerStartUpInfo(); &#125; public JobExecutor(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final ElasticJobListener... elasticJobListeners) &#123; jobName = jobConfig.getJobName(); this.regCenter = regCenter; List&lt;ElasticJobListener&gt; elasticJobListenerList = Arrays.asList(elasticJobListeners); setGuaranteeServiceForElasticJobListeners(regCenter, jobConfig, elasticJobListenerList); elasticJob = createElasticJob(jobConfig, elasticJobListenerList); schedulerFacade = new SchedulerFacade(regCenter, jobConfig, elasticJobListenerList); &#125; private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final List&lt;ElasticJobListener&gt; elasticJobListeners) &#123; GuaranteeService guaranteeService = new GuaranteeService(regCenter, jobConfig); for (ElasticJobListener each : elasticJobListeners) &#123; if (each instanceof AbstractDistributeOnceElasticJobListener) &#123; ((AbstractDistributeOnceElasticJobListener) each).setGuaranteeService(guaranteeService); &#125; &#125; &#125; private ElasticJob createElasticJob(final JobConfiguration jobConfig, final List&lt;ElasticJobListener&gt; elasticJobListenerList) &#123; ElasticJob result; try &#123; result = (ElasticJob) jobConfig.getJobClass().newInstance(); &#125; catch (final InstantiationException | IllegalAccessException ex) &#123; throw new JobException(ex); &#125; result.setJobFacade(new JobFacade(regCenter, jobConfig, elasticJobListenerList)); return result; &#125;&#125;JobFacade门面类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103/** * 为调度器提供内部服务的门面类. * * @author zhangliang */public class SchedulerFacade &#123; private final ConfigurationService configService; private final LeaderElectionService leaderElectionService; private final ServerService serverService; private final ShardingService shardingService; private final ExecutionService executionService; private final StatisticsService statisticsService; private final MonitorService monitorService; private final ListenerManager listenerManager; public SchedulerFacade(final CoordinatorRegistryCenter coordinatorRegistryCenter, final JobConfiguration jobConfiguration, final List&lt;ElasticJobListener&gt; elasticJobListeners) &#123; configService = new ConfigurationService(coordinatorRegistryCenter, jobConfiguration); leaderElectionService = new LeaderElectionService(coordinatorRegistryCenter, jobConfiguration); serverService = new ServerService(coordinatorRegistryCenter, jobConfiguration); shardingService = new ShardingService(coordinatorRegistryCenter, jobConfiguration); executionService = new ExecutionService(coordinatorRegistryCenter, jobConfiguration); statisticsService = new StatisticsService(coordinatorRegistryCenter, jobConfiguration); monitorService = new MonitorService(coordinatorRegistryCenter, jobConfiguration); listenerManager = new ListenerManager(coordinatorRegistryCenter, jobConfiguration, elasticJobListeners); &#125; /** * 每次作业启动前清理上次运行状态. */ public void clearPreviousServerStatus() &#123; serverService.clearPreviousServerStatus(); &#125; /** * 注册Elastic-Job启动信息. */ public void registerStartUpInfo() &#123; //启动各类监听器 listenerManager.startAllListeners(); //强制选举主节点 leaderElectionService.leaderForceElection(); //zk中持久化分布式作业配置信息 configService.persistJobConfiguration(); //zk中持久化作业服务器上线相关信息. serverService.persistServerOnline(); //清除暂停作业的标记. serverService.clearJobPausedStatus(); if (JobType.DATA_FLOW == configService.getJobType()) &#123; //异步开启统计处理数据数量的作业 statisticsService.startProcessCountJob(); &#125; //设置需要重新分片的标记 shardingService.setReshardingFlag(); //初始化作业监控服务 monitorService.listen(); &#125; /** * 释放作业占用的资源. */ public void releaseJobResource() &#123; monitorService.close(); if (JobType.DATA_FLOW.equals(configService.getJobType())) &#123; statisticsService.stopProcessCountJob(); &#125; serverService.removeServerStatus(); &#125; /** * 获取作业启动时间的cron表达式. * * @return 作业启动时间的cron表达式 */ public String getCron() &#123; return configService.getCron(); &#125; /** * 获取是否开启misfire. * * @return 是否开启misfire */ public boolean isMisfire() &#123; return configService.isMisfire(); &#125; /** * 获取作业触发监听器. * * @return 作业触发监听器 */ public JobTriggerListener newJobTriggerListener() &#123; return new JobTriggerListener(executionService, shardingService); &#125;&#125;作业注册表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * 作业注册表. * * @author zhangliang * @author caohao *///多线程双检锁：保证单例线程安全@NoArgsConstructor(access = AccessLevel.PRIVATE)public final class JobRegistry &#123; //为什么要用volatile关键字？ private static volatile JobRegistry instance; //全局的作业被以map形式缓存在注册表单例中 private Map&lt;String, JobScheduleController&gt; schedulerMap = new ConcurrentHashMap&lt;&gt;(); /** * 获取作业注册表实例. * * @return 作业注册表实例 */ public static JobRegistry getInstance() &#123; if (null == instance) &#123; synchronized (JobRegistry.class) &#123; if (null == instance) &#123; //实际上实例化分为分配内存和执行构造方法两部分，如果不加volatile，会导致指令重排序，导致构造方法先被执行。 //而另一个线程到达临界区代码段，从而获取到一个未被完全实例化的instance。 instance = new JobRegistry(); &#125; &#125; &#125; return instance; &#125; /** * 添加作业调度控制器. * * @param jobName 作业名称 * @param jobScheduleController 作业调度控制器 */ public void addJobScheduleController(final String jobName, final JobScheduleController jobScheduleController) &#123; schedulerMap.put(jobName, jobScheduleController); &#125; /** * 获取作业调度控制器. * * @param jobName 作业名称 * @return 作业调度控制器 */ public JobScheduleController getJobScheduleController(final String jobName) &#123; return schedulerMap.get(jobName); &#125;&#125;]]></content>
      <tags>
        <tag>源码</tag>
        <tag>elastic-job</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elastic-job源码浅析-架构篇]]></title>
    <url>%2F2018%2F10%2F25%2Felastic-job%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90-%E6%9E%B6%E6%9E%84%E7%AF%87%2F</url>
    <content type="text"><![CDATA[源码阅读小技巧传送门写在前面elastic-job是当当开源的一款非常好用的作业框架，在此之前，任务调度的主流框架是quartZ或者spring-task。两者均不能很好地支持高并发量的分布式任务调度，即使是号称拥有集群能力的quartZ也仅仅保证了job的高可用，单一时刻只能有一台机器执行具体的调度任务。因此，老牌劲旅无法解决两个迫切的需求点：1.quartZ的集群仅仅是用于实现HA（high avalible),无法实现高并发；2.无论quartZ还是spring-task，均无法很好地实现水平拓展；1Elastic-Job is a distributed scheduled job framework, based on Quartz and Zookeeper.上述文字是elastic-job github主页对它的描述，从上面的描述中我们可以看到两个关键字Quartz和Zookeeper，基于以上两个基础框架，Elastic-job实现了高可用和高并发。elastic-job解决了那些问题举个典型的job场景，比如余额宝里的昨日收益，系统需要job在每天某个时间点开始，给所有余额宝用户计算收益。如果用户数量不多，我们可以轻易使用quartz来完成，我们让计息job在某个时间点开始执行，循环遍历所有用户计算利息，这没问题。可是，如果用户体量特别大，我们可能会面临着在第二天之前处理不完这么多用户。另外，我们部署job的时候也得注意，我们可能会把job直接放在我们的webapp里，webapp通常是多节点部署的，这样，我们的job也就是多节点，多个job同时执行，很容易造成重复执行，比如用户重复计息，为了避免这种情况，我们可能会对job的执行加锁，保证始终只有一个节点能执行，或者干脆让job从webapp里剥离出来，独自部署一个节点。elastic-job就可以帮助我们解决上面的问题，elastic底层的任务调度还是使用的quartz，通过zookeeper来动态给job节点分片。我们来看：很大体量的用户需要在特定的时间段内计息完成我们肯定是希望我们的任务可以通过集群达到水平扩展，集群里的每个节点都处理部分用户，不管用户数量有多庞大，我们只要增加机器就可以了，比如单台机器特定时间能处理n个用户，2台机器处理2n个用户，3台3n，4台4n…，再多的用户也不怕了。使用elastic-job开发的作业都是zookeeper的客户端，比如我希望3台机器跑job，我们将任务分成3片，框架通过zk的协调，最终会让3台机器分别分配到0,1,2的任务片，比如server0–&gt;0，server1–&gt;1，server2–&gt;2，当server0执行时，可以只查询id%3==0的用户，server1执行时，只查询id%3==1的用户，server2执行时，只查询id%3==2的用户。任务部署多节点引发重复执行在上面的基础上，我们再增加server3，此时，server3分不到任务分片，因为只有3片，已经分完了。没有分到任务分片的作业程序将不执行。如果此时server2挂了，那么server2的分片项会分配给server3，server3有了分片，就会替代server2执行。如果此时server3也挂了，只剩下server0和server1了，框架也会自动把server3的分片随机分配给server0或者server1，可能会这样，server0–&gt;0，server1–&gt;1,2。这种特性称之为弹性扩容，即elastic-job名称的由来。上述的引用比较冗长，简单地理解就是elastic-job利用zk的分布式集群管理能力，对job节点进行的弹性扩容和收缩。同时任务分片的方式保证了job执行的并发能力和防止重复执行，使任务调度不仅拥有高可用，也具备了水平拓展和高并发能力。elastic-job结构elastic-job架构图任务节点数据结构elastic-job模块简析core的主要的模块分为:job模块：plugin(内含三种不同的作业类型,分片策略)，api(对外暴露的api服务)，exception(异常类)，internal(内部模块)reg(注册中心)模块：base(基类)，异常处理模块，zookeeper注册中心模块]]></content>
      <tags>
        <tag>源码</tag>
        <tag>elastic-job</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo优化攻略]]></title>
    <url>%2F2018%2F10%2F25%2Fhexo%E4%BC%98%E5%8C%96%E6%94%BB%E7%95%A5%2F</url>
    <content type="text"><![CDATA[写在前面这个攻略主要是给有一定diy能力的hexo博主。一些细节的攻略可以参考如下文章：hexo 基础配置优化插件进阶静态代码压缩文章比较长的情况下网页往往会显示地较慢。因此，需要对静态代码进行压缩，以提高网站的响应速度。1npm install hexo-all-minifier --save在hexo根目录下的_config.yml中配置:12345678910111213141516171819202122232425262728# 代码压缩 github.com/chenzhutian/hexo-all-minifierall_minifier: truehtml_minifier: enable: true ignore_error: false exclude: css_minifier: enable: true exclude: - '*.min.css'js_minifier: enable: true mangle: true output: compress: exclude: - '*.min.js'image_minifier: enable: false # 图片不压缩 interlaced: false multipass: false optimizationLevel: 2 pngquant: false progressive: false文章加密插件安装1npm install hexo-encrypt --save在项目_config.yml中声名默认密码123#该密码为全局默认密码encrypt: password: 你的密码在文章头加入密码配置12encrypt: trueenc_pwd: 你的文章独立密码在根目录的package.json中追加配置，记得补全“,”1"hexo-encrypt": "^0.2.0"最终效果网站顶部进度条在{hexo-path}/themes/next/layout/_partials/head/head.swig中顶部加入如下代码123456789101112131415&lt;script src="//cdn.bootcss.com/pace/1.0.2/pace.min.js"&gt;&lt;/script&gt;&lt;link href="//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css" rel="stylesheet"&gt;&lt;style&gt;.pace .pace-progress &#123; background: #f6a427; /*进度条颜色*/ height: 3px;&#125;.pace .pace-progress-inner &#123; box-shadow: 0 0 10px #1E92FB, 0 0 5px #1E92FB; /*阴影颜色*/&#125;.pace .pace-activity &#123; border-top-color: #1E92FB; /*上边框颜色*/ border-left-color: #1E92FB; /*左边框颜色*/&#125;&lt;/style&gt;效果图]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>优化</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于装修的一点想法]]></title>
    <url>%2F2018%2F10%2F25%2F%E5%85%B3%E4%BA%8E%E8%A3%85%E4%BF%AE%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95%2F</url>
    <content type="text"><![CDATA[装修风格的讨论在这个宅基地很难批准的时候，终于可以造房子了。楼房的样式是那种两层平层 + 一层别墅式的样子，虽然比不上欧式的新颖，但是空间足够大，四平八稳的风格还算能接受。对于装修风格，和瓢羹同学也有一些讨论。一开始瓢羹同学认为欧式的辉煌装修风格不错，但是我觉得有点老土。于是呢，她说北欧性冷风不错，我也觉得可以，只是美中不足的是有点暗色调，不适合居家。我呢，有点青睐于和风的风格，比较的小资。但是，作为自建房格调又显得有点小气了。所以，经过一番博弈，我们最终把两种风格进行了mix——其实我们不是一定青睐和风，亦或是北欧。后来我们发现，我们只是对原木风比较感冒。原木材质的纹理，配合较大空间的色彩搭配，整体给人一种居家的舒适感和归属感。同时，又比较有格调。要准备的工作从目前来看打的轮廓和格局已经敲定了，但是整体装修的渲染还没出来，准备抽空到酷家乐搞一波装修效果图。到时候看看整体下来的装修效果如何。全景预览全景图传送门装修效果图装修资料酷家乐 有好几套比较合理的和风装修来自酷家乐，吊顶采用了比较简约的纯白+造型别致的灯具，这个风格我们都比较喜欢。易盖房 小别墅一些样式比较讨巧，看着比较舒服。]]></content>
      <tags>
        <tag>酷玩</tag>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员养生秘笈]]></title>
    <url>%2F2018%2F10%2F21%2F%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%85%BB%E7%94%9F%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>程序员</tag>
        <tag>养生</tag>
        <tag>码农</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 源码阅读]]></title>
    <url>%2F2018%2F10%2F19%2Fspring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[对于spring源码的一些个人的见解！！！spring 核心代码12345参考资料：spring源码深度解析Spring版本：Spring-4.3.5-RELEASE吐槽下，老外写的东西真晕啊，像亲妈一样啰啰嗦嗦帮你考虑了各种情况，然后最好还不忘加一句：如果你不满意，还可以拓展！！！核心流程初始化过程非常清晰的模板方法，每一个步骤封装成一个具体的函数进行代理，职责清晰明了；12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273@Overridepublic void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; //预热，做准备工作 prepareRefresh(); // Tell the subclass to refresh the internal bean factory. //获取内部的bean factory ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); // Prepare the bean factory for use in this context. //预热beanFactory prepareBeanFactory(beanFactory); try &#123; // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory(beanFactory); // Invoke factory processors registered as beans in the context. //beanFactory在上下文中注册bean，核心的代码就在这里 invokeBeanFactoryPostProcessors(beanFactory); // Register bean processors that intercept bean creation. // bean创建的时候拦截并注册bean处理器，这里只创建处理器，真正的创建是在getBean(..)方法里 registerBeanPostProcessors(beanFactory); // Initialize message source for this context. // 用于支持国际化，比如一些日志的国际化匹配等； initMessageSource(); // 为上下文初始化消息传播工具 initApplicationEventMulticaster(); // Initialize other special beans in specific context subclasses. // 钩子方法：额外的beans处理方法 onRefresh(); // Check for listener beans and register them. // 注册监听器 registerListeners(); // Instantiate all remaining (non-lazy-init) singletons. // 实例化非延时加载的bean单例 finishBeanFactoryInitialization(beanFactory); // Last step: publish corresponding event. // push beans创建完成的消息 finishRefresh(); &#125; catch (BeansException ex) &#123; if (logger.isWarnEnabled()) &#123; logger.warn("Exception encountered during context initialization - " + "cancelling refresh attempt: " + ex); &#125; // Destroy already created singletons to avoid dangling resources. destroyBeans(); // Reset 'active' flag. cancelRefresh(ex); // Propagate exception to caller. throw ex; &#125; finally &#123; // Reset common introspection caches in Spring's core, since we // might not ever need metadata for singleton beans anymore... resetCommonCaches(); &#125; &#125;&#125;spring 类加载的基本类spring DefaultListableBeanFactory UML示意图：spring bean 创建过程转换beanName尝试从缓存中获取单例bean本身的实例化原型模式依赖检测parentBeanFactory 检测将gernerecBeanDefinition 转换成 RootBeanDefination寻找依赖根据scope 初始化(init)对应的bean类型转换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171/** * Return an instance, which may be shared or independent, of the specified bean. * @param name the name of the bean to retrieve * @param requiredType the required type of the bean to retrieve * @param args arguments to use when creating a bean instance using explicit arguments * (only applied when creating a new instance as opposed to retrieving an existing one) * @param typeCheckOnly whether the instance is obtained for a type check, * not for actual use * @return an instance of the bean * @throws BeansException if the bean could not be created */@SuppressWarnings("unchecked")protected &lt;T&gt; T doGetBean( final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException &#123; //转换beanName，我们知道在spring中，bean factory的名称都是类似于 &amp;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory //因此获取的时候需要进行转换 final String beanName = transformedBeanName(name); Object bean; // Eagerly check singleton cache for manually registered singletons. // 尝试从缓存中获取单例 Object sharedInstance = getSingleton(beanName); if (sharedInstance != null &amp;&amp; args == null) &#123; if (logger.isDebugEnabled()) &#123; if (isSingletonCurrentlyInCreation(beanName)) &#123; logger.debug("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference"); &#125; else &#123; logger.debug("Returning cached instance of singleton bean '" + beanName + "'"); &#125; &#125; //实例化 bean = getObjectForBeanInstance(sharedInstance, name, beanName, null); &#125; else &#123; // Fail if we're already creating this bean instance: // We're assumably within a circular reference. // 检测当前依赖的类是否正在创建，如果是，则抛出异常 if (isPrototypeCurrentlyInCreation(beanName)) &#123; throw new BeanCurrentlyInCreationException(beanName); &#125; // Check if bean definition exists in this factory. // 如果bean配置不存在则只能去父工厂找 BeanFactory parentBeanFactory = getParentBeanFactory(); if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123; // Not found -&gt; check parent. String nameToLookup = originalBeanName(name); if (args != null) &#123; // Delegation to parent with explicit args. return (T) parentBeanFactory.getBean(nameToLookup, args); &#125; else &#123; // No args -&gt; delegate to standard getBean method. return parentBeanFactory.getBean(nameToLookup, requiredType); &#125; &#125; if (!typeCheckOnly) &#123; markBeanAsCreated(beanName); &#125; try &#123; //转换并合并BeanDefinition属性 final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName); checkMergedBeanDefinition(mbd, beanName, args); // Guarantee initialization of beans that the current bean depends on. // 原型模式的bean需要循环检测依赖 防止出现A-&gt;B-&gt;A 的循环依赖情况出现 String[] dependsOn = mbd.getDependsOn(); if (dependsOn != null) &#123; for (String dep : dependsOn) &#123; if (isDependent(beanName, dep)) &#123; throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'"); &#125; registerDependentBean(dep, beanName); getBean(dep); &#125; &#125; // Create bean instance. // 创建bean实例 if (mbd.isSingleton()) &#123; sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; try &#123; return createBean(beanName, mbd, args); &#125; catch (BeansException ex) &#123; // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; &#125; &#125; &#125;); bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd); &#125; else if (mbd.isPrototype()) &#123; // It's a prototype -&gt; create a new instance. Object prototypeInstance = null; try &#123; beforePrototypeCreation(beanName); prototypeInstance = createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd); &#125; else &#123; String scopeName = mbd.getScope(); final Scope scope = this.scopes.get(scopeName); if (scope == null) &#123; throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'"); &#125; try &#123; Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; beforePrototypeCreation(beanName); try &#123; return createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; &#125; &#125;); bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd); &#125; catch (IllegalStateException ex) &#123; throw new BeanCreationException(beanName, "Scope '" + scopeName + "' is not active for the current thread; consider " + "defining a scoped proxy for this bean if you intend to refer to it from a singleton", ex); &#125; &#125; &#125; catch (BeansException ex) &#123; cleanupAfterBeanCreationFailure(beanName); throw ex; &#125; &#125; // Check if required type matches the type of the actual bean instance. // 转换bean类型 if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isAssignableFrom(bean.getClass())) &#123; try &#123; return getTypeConverter().convertIfNecessary(bean, requiredType); &#125; catch (TypeMismatchException ex) &#123; if (logger.isDebugEnabled()) &#123; logger.debug("Failed to convert bean '" + name + "' to required type '" + ClassUtils.getQualifiedName(requiredType) + "'", ex); &#125; throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass()); &#125; &#125; return (T) bean;&#125;spring事务隔离级别及事务传播实现propagation_requierd(spring的事务默认是该级别)：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113/** * Create a TransactionStatus for an existing transaction. */private TransactionStatus handleExistingTransaction( TransactionDefinition definition, Object transaction, boolean debugEnabled) throws TransactionException &#123; //若为非事务方式，则抛异常 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123; throw new IllegalTransactionStateException( "Existing transaction found for transaction marked with propagation 'never'"); &#125; // 若存在事务，挂起适当前事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123; if (debugEnabled) &#123; logger.debug("Suspending current transaction"); &#125; // 挂起当前事务 Object suspendedResources = suspend(transaction); boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS); return prepareTransactionStatus( definition, null, false, newSynchronization, debugEnabled, suspendedResources); &#125; // 挂起当前事务，并新建事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123; if (debugEnabled) &#123; logger.debug("Suspending current transaction, creating new transaction with name [" + definition.getName() + "]"); &#125; //挂起当前事务 SuspendedResourcesHolder suspendedResources = suspend(transaction); try &#123; boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); DefaultTransactionStatus status = newTransactionStatus( definition, transaction, true, newSynchronization, debugEnabled, suspendedResources); // 重新开启事务 doBegin(transaction, definition); prepareSynchronization(status, definition); return status; &#125; catch (RuntimeException beginEx) &#123; resumeAfterBeginException(transaction, suspendedResources, beginEx); throw beginEx; &#125; catch (Error beginErr) &#123; resumeAfterBeginException(transaction, suspendedResources, beginErr); throw beginErr; &#125; &#125; // 若当前事务存在，则嵌套执行事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123; if (!isNestedTransactionAllowed()) &#123; throw new NestedTransactionNotSupportedException( "Transaction manager does not allow nested transactions by default - " + "specify 'nestedTransactionAllowed' property with value 'true'"); &#125; if (debugEnabled) &#123; logger.debug("Creating nested transaction with name [" + definition.getName() + "]"); &#125; // 判定是否支持事务备份点 if (useSavepointForNestedTransaction()) &#123; // Create savepoint within existing Spring-managed transaction, // through the SavepointManager API implemented by TransactionStatus. // Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization. DefaultTransactionStatus status = prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null); // 创建备份点 status.createAndHoldSavepoint(); return status; &#125; else &#123; // Nested transaction through nested begin and commit/rollback calls. // Usually only for JTA: Spring synchronization might get activated here // in case of a pre-existing JTA transaction. boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); DefaultTransactionStatus status = newTransactionStatus( definition, transaction, true, newSynchronization, debugEnabled, null); // 不支持备份点的情况下会新建事务 doBegin(transaction, definition); prepareSynchronization(status, definition); return status; &#125; &#125; // Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED. if (debugEnabled) &#123; logger.debug("Participating in existing transaction"); &#125; if (isValidateExistingTransaction()) &#123; if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123; Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel(); if (currentIsolationLevel == null || currentIsolationLevel != definition.getIsolationLevel()) &#123; Constants isoConstants = DefaultTransactionDefinition.constants; throw new IllegalTransactionStateException("Participating transaction with definition [" + definition + "] specifies isolation level which is incompatible with existing transaction: " + (currentIsolationLevel != null ? isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) : "(unknown)")); &#125; &#125; if (!definition.isReadOnly()) &#123; if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123; throw new IllegalTransactionStateException("Participating transaction with definition [" + definition + "] is not marked as read-only but existing transaction is"); &#125; &#125; &#125; boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);&#125;一些干货aop注入的实现过程doCreateBean中会暴露一个bean引用，用以处理循环引用；同时大家熟知的AOP就是通过getEarlyBeanReference(..)方法植入的；具体的，是在wrapIfNecessary(..) 方法中封装了advice并创建了代理；@Autowired注解的实现doCreateBean(..)中的populateBean(..)方法，实现了基于@Autowired注解的实现，根据名称或类型进行依赖的注入；]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>源码阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Mvc源码阅读]]></title>
    <url>%2F2018%2F10%2F19%2Fspringmvc%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[对springMVC的一些思考!!!Spring Mvc源码阅读12345678910111213SpringMVC核心处理流程：1、DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器2、HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）3、HandlerAdapter处理器适配器，请求数据绑定和转换，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）4、ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图5、然后再将Model模型中的数据渲染到View上这些过程都是以DispatcherServlet为中轴线进行的。入口源码springMVC的请求会交由dispatcherServlet处理，其本质上是一个多线程的请求处理机制；核心业务逻辑被设计在doDispatcher(..)方法中；123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100/** * Process the actual dispatching to the handler. * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order. * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters * to find the first that supports the handler class. * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers * themselves to decide which methods are acceptable. * @param request current HTTP request * @param response current HTTP response * @throws Exception in case of any kind of processing failure */protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; HttpServletRequest processedRequest = request; HandlerExecutionChain mappedHandler = null; boolean multipartRequestParsed = false; WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request); try &#123; ModelAndView mv = null; Exception dispatchException = null; try &#123; processedRequest = checkMultipart(request); multipartRequestParsed = (processedRequest != request); // 绑定url -&gt; 具体的handler/Controller.method(..) // Determine handler for the current request. mappedHandler = getHandler(processedRequest); if (mappedHandler == null || mappedHandler.getHandler() == null) &#123; noHandlerFound(processedRequest, response); return; &#125; // 根据handler绑定具体的adapter // Determine handler adapter for the current request. HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler()); // Process last-modified header, if supported by the handler. String method = request.getMethod(); boolean isGet = "GET".equals(method); if (isGet || "HEAD".equals(method)) &#123; long lastModified = ha.getLastModified(request, mappedHandler.getHandler()); if (logger.isDebugEnabled()) &#123; logger.debug("Last-Modified value for [" + getRequestUri(request) + "] is: " + lastModified); &#125; if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123; return; &#125; &#125; // interceptor 拦截器进行前置预处理 if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123; return; &#125; // 在handle方法中进行了请求数据的绑定，方法invoke，返回model的处理和封装等 // Actually invoke the handler. mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); if (asyncManager.isConcurrentHandlingStarted()) &#123; return; &#125; applyDefaultViewName(processedRequest, mv); mappedHandler.applyPostHandle(processedRequest, response, mv); &#125; catch (Exception ex) &#123; dispatchException = ex; &#125; catch (Throwable err) &#123; // As of 4.3, we're processing Errors thrown from handler methods as well, // making them available for @ExceptionHandler methods and other scenarios. dispatchException = new NestedServletException("Handler dispatch failed", err); &#125; processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException); &#125; catch (Exception ex) &#123; triggerAfterCompletion(processedRequest, response, mappedHandler, ex); &#125; catch (Throwable err) &#123; triggerAfterCompletion(processedRequest, response, mappedHandler, new NestedServletException("Handler processing failed", err)); &#125; finally &#123; if (asyncManager.isConcurrentHandlingStarted()) &#123; // Instead of postHandle and afterCompletion if (mappedHandler != null) &#123; mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response); &#125; &#125; else &#123; // Clean up any resources used by a multipart request. if (multipartRequestParsed) &#123; cleanupMultipart(processedRequest); &#125; &#125; &#125;&#125;核心关注的几个问题请求如何路由到具体的Controller上的方法进行处理?根据请求路径，与已知的handlerMapping进行匹配，并加入interceptors:dispatcherServlet.getHandler()最终调用AbstracteHandlerMapping.getHandlerExecutionChain(..)中进行url与handlerMapping进行匹配，并加入interceptors;扁平化的前端请求数据如何进行数据绑定？我们知道，前端的get/post等请求，会被requestServlet接受，并封装成HttpServletRequest的parameterMap中，每一项请求的数据结构都是 K-V 形的。而我们知道，像这样的形式，那么在这个中间数据如何实现数据绑定到Bean，String格式的Value 转换成各种目标格式。事实上，spring MVC将整个网络请求的处理流程进行了合理的切分,其大致的处理流程如下：12345678910111.调用匹配到的adapter.handle(..)2.然后调用invokeAndHandle(..)3.调用invokeForRequest(..)获取getMethodArgumentValues(..)获取和绑定入参;4.在具体的方法中，获取支持处理的argumentResolvers,然后调用resolveArgument(..)方法;5.在ModelAttributeMethodProcessor中调用bindRequestParameters(binder, webRequest),方法，然后再调用bind()进行bean参数的绑定；6.调用binder.convertIfNecessary(arg, parameter.getParameterType(), parameter)方法进行参数的转换；]]></content>
      <tags>
        <tag>Spring MVC</tag>
        <tag>Spring</tag>
        <tag>源码阅读</tag>
      </tags>
  </entry>
</search>
