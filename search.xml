<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[高中三年，等你下课]]></title>
    <url>%2F2018%2F11%2F12%2F%E9%AB%98%E4%B8%AD%E4%B8%89%E5%B9%B4%EF%BC%8C%E7%AD%89%E4%BD%A0%E4%B8%8B%E8%AF%BE%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>脑洞</tag>
        <tag>周杰伦</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用命令大乱炖]]></title>
    <url>%2F2018%2F11%2F08%2F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E4%B9%B1%E7%82%96%2F</url>
    <content type="text"><![CDATA[命令行这个东西，就像考试一样，书到用时方恨少。所以，平时积累一些常用的命令行和脚本zookeeper命令zkCli命令1$ zkCli -timeout 5000 -server 127.0.0.1:2181zkServer命令1234567891011121314$ zkServer JMX enabled by defaultUsing config: /usr/local/etc/zookeeper/zoo.cfgUsage: ./zkServer.sh &#123;start|start-foreground|stop|restart|status|upgrade|print-cmd&#125;$ zkServer statusJMX enabled by defaultUsing config: /usr/local/etc/zookeeper/zoo.cfgError contacting service. It is probably not running.$ zkServer startJMX enabled by defaultUsing config: /usr/local/etc/zookeeper/zoo.cfgStarting zookeeper ... STARTED]]></content>
      <tags>
        <tag>shell</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql萌新入门指南]]></title>
    <url>%2F2018%2F11%2F04%2Fmysql%E8%90%8C%E6%96%B0%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[这里是萌新入门指南，瓢羹同学戳这里&gt;&gt;&gt;-- 插入 INSERT INTO `test-db`.`tb_student` ( `student_name`, `student_no`, `studnet_gender`, `favorite_course` ) VALUES ( 'tomb', 'no.11', '女', '1' ); -- 修改 update `test-db`.`tb_student` set `favorite_course` = '2',`student_name` = 'tombb' where `student_name` like '%b%'; -- 查询 select * from `test-db`.`tb_student` WHERE `student_no` = 'no.11'; select * from `test-db`.`tb_student` WHERE `student_name` = 'tombb'; -- 查询排序 -- asc: ascend的缩写，表示升序 select * from `test-db`.`tb_student` where `studnet_gender` = '男' order by `student_no` asc; -- desc: 表示降序 -- 字符默认按照从左往右的ascii顺序进行排序的 select * from `test-db`.tb_student where `studnet_gender` = '女' order by `student_no` desc; -- 删除 delete from `test-db`.`tb_student` where `student_name` = 'tombb'; -- 找出所有姓张的学生名字 select `student_name` as '学生姓名' from `test-db`.`tb_student` where `student_name` like '张%'; -- 联表查询 学生名称-&gt;课程名称 -- 注意：1.联表查询时，查询连接关键字为 “on”，单表查询连接关键字为 “where”。 -- 2.联表查询时，on后面可以再接where关键字，进行外表的进一步查询 select ts.`student_name`,tc.`course_name` from `tb_student` as ts inner join `tb_course` tc on ts.`favorite_course` = tc.`id`; -- 联表查询 学生名称-&gt;性别（男）-&gt;课程名称,查询条件并列的情况用 or，串联条件用 and。 -- 第一种：条件全写在on 之后的语句中 SELECT ts.`student_name` as '姓名', ts.`studnet_gender` as '性别', tc.`course_name` as '课程名称' FROM tb_student AS ts INNER JOIN `tb_course` tc ON ts.`favorite_course` = tc.`id` and ts.`studnet_gender` = '男'; -- 第二种，where 和 on 一起用,推荐用这种，因为事先先把主表符合要求的结果筛选出来，再与附表匹配，性能更好！ SELECT ts.`student_name` as '姓名', ts.`studnet_gender` as '性别', tc.`course_name` as '课程名称' FROM `tb_student` AS ts INNER JOIN `tb_course` tc ON ts.`favorite_course` = tc.`id` where ts.`studnet_gender` = '男'; -- 统计所有课程被学生喜欢的数量: 课程名称 -&gt; 数量 select tc.`course_name` as '课程名称', count(ts.`id`) as '数量' from `tb_course` as tc LEFT JOIN `tb_student` as ts on tc.`id` = ts.`favorite_course` GROUP BY tc.`id`; -- 这个例子有点难，所以我们先来安利一下 group by -- 根据性别统计学生数量 select `studnet_gender` as '性别', count(`studnet_gender`) as '数量' from `tb_student` GROUP BY `studnet_gender`; select sum( case when `studnet_gender` = '男' then 1 else 0 end ) as '男生数量', sum(case when `studnet_gender` = '女' then 1 else 0 end ) as '女生数量' from `tb_student` ;]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[周末遐思]]></title>
    <url>%2F2018%2F10%2F29%2F%E5%91%A8%E6%9C%AB%E9%81%90%E6%80%9D%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>脑洞</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那些令人捧腹的梗]]></title>
    <url>%2F2018%2F10%2F26%2F%E9%82%A3%E4%BA%9B%E4%BB%A4%E4%BA%BA%E6%8D%A7%E8%85%B9%E7%9A%84%E6%A2%97%2F</url>
    <content type="text"><![CDATA[关于程序员的老梗金庸小说人物英文名，你能猜对几个]]></content>
      <tags>
        <tag>脑洞</tag>
        <tag>搞笑</tag>
        <tag>梗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elastic-job源码浅析-源码分析]]></title>
    <url>%2F2018%2F10%2F25%2Felastic-job%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[核心源码分析核心入口：JobScheduler作业调度器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * 作业调度器. * * @author zhangliang * @author caohao */public class JobScheduler &#123; private static final String SCHEDULER_INSTANCE_NAME_SUFFIX = "Scheduler"; private static final String CRON_TRIGGER_IDENTITY_SUFFIX = "Trigger"; //作业启动器 private final JobExecutor jobExecutor; public JobScheduler(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final ElasticJobListener... elasticJobListeners) &#123; jobExecutor = new JobExecutor(regCenter, jobConfig, elasticJobListeners); &#125; /** * 初始化作业. */ public void init() &#123; //作业启动器初始化 jobExecutor.init(); //建造者模式构造jobDetail JobDetail jobDetail = JobBuilder.newJob(LiteJob.class).withIdentity(jobExecutor.getJobName()).build(); //保留job的状态信息 jobDetail.getJobDataMap().put("elasticJob", jobExecutor.getElasticJob()); JobScheduleController jobScheduleController; try &#123; //实例化作业调度控制器 jobScheduleController = new JobScheduleController( initializeScheduler(jobDetail.getKey().toString()), jobDetail, jobExecutor.getSchedulerFacade(), Joiner.on("_").join(jobExecutor.getJobName(), CRON_TRIGGER_IDENTITY_SUFFIX)); jobScheduleController.scheduleJob(jobExecutor.getSchedulerFacade().getCron()); &#125; catch (final SchedulerException ex) &#123; throw new JobException(ex); &#125; //向作业注册表注册JobScheduleController实例 JobRegistry.getInstance().addJobScheduleController(jobExecutor.getJobName(), jobScheduleController); &#125; private Scheduler initializeScheduler(final String jobName) throws SchedulerException &#123; //工厂方法构造quartz的Scheduler实例 StdSchedulerFactory factory = new StdSchedulerFactory(); factory.initialize(getBaseQuartzProperties(jobName)); Scheduler result = factory.getScheduler(); //注册Trigger监听事件 result.getListenerManager().addTriggerListener(jobExecutor.getSchedulerFacade().newJobTriggerListener()); return result; &#125; private Properties getBaseQuartzProperties(final String jobName) &#123; Properties result = new Properties(); result.put("org.quartz.threadPool.class", org.quartz.simpl.SimpleThreadPool.class.getName()); //并发执行线程数为1，意味着job任务同步执行，防止同一个任务执行时间过长被多次执行 result.put("org.quartz.threadPool.threadCount", "1"); result.put("org.quartz.scheduler.instanceName", Joiner.on("_").join(jobName, SCHEDULER_INSTANCE_NAME_SUFFIX)); if (!jobExecutor.getSchedulerFacade().isMisfire()) &#123; result.put("org.quartz.jobStore.misfireThreshold", "1"); &#125; prepareEnvironments(result); return result; &#125; //钩子方法，用于子类覆盖 protected void prepareEnvironments(final Properties props) &#123; &#125; &#125;作业启动器的init方法1234567891011121314151617181920212223242526272829303132333435363738/** * JobExecutor * 初始化作业. */ public void init() &#123; log.debug("Elastic job: job controller init, job name is: &#123;&#125;.", jobName); //清除上次secheduler的信息 schedulerFacade.clearPreviousServerStatus(); //向注册中心注册当前job regCenter.addCacheData("/" + jobName); //门面类执行具体业务初始化工作 schedulerFacade.registerStartUpInfo(); &#125; /** * SchedulerFacade门面类 * 注册Elastic-Job启动信息. */ public void registerStartUpInfo() &#123; //启动所有监听事件 listenerManager.startAllListeners(); //强制主节点选举 leaderElectionService.leaderForceElection(); //持久化分布式作业配置信息 configService.persistJobConfiguration(); //持久化作业服务器上线相关信息 serverService.persistServerOnline(); //清除暂停作业的标记 serverService.clearJobPausedStatus(); if (JobType.DATA_FLOW == configService.getJobType()) &#123; //异步开启定时批量统计处理数据数量的作业 statisticsService.startProcessCountJob(); &#125; //设置需要重新分片的标记 shardingService.setReshardingFlag(); //初始化作业监听服务 monitorService.listen(); &#125;作业注册表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * 作业注册表. * * @author zhangliang * @author caohao *///多线程双检锁：保证单例线程安全@NoArgsConstructor(access = AccessLevel.PRIVATE)public final class JobRegistry &#123; //为什么要用volatile关键字？ private static volatile JobRegistry instance; //全局的作业被以map形式缓存在注册表单例中 private Map&lt;String, JobScheduleController&gt; schedulerMap = new ConcurrentHashMap&lt;&gt;(); /** * 获取作业注册表实例. * * @return 作业注册表实例 */ public static JobRegistry getInstance() &#123; if (null == instance) &#123; synchronized (JobRegistry.class) &#123; if (null == instance) &#123; //实际上实例化分为分配内存和执行构造方法两部分，如果不加volatile，会导致指令重排序，导致构造方法先被执行。 //而另一个线程到达临界区代码段，从而获取到一个未被完全实例化的instance。 instance = new JobRegistry(); &#125; &#125; &#125; return instance; &#125; /** * 添加作业调度控制器. * * @param jobName 作业名称 * @param jobScheduleController 作业调度控制器 */ public void addJobScheduleController(final String jobName, final JobScheduleController jobScheduleController) &#123; schedulerMap.put(jobName, jobScheduleController); &#125; /** * 获取作业调度控制器. * * @param jobName 作业名称 * @return 作业调度控制器 */ public JobScheduleController getJobScheduleController(final String jobName) &#123; return schedulerMap.get(jobName); &#125;&#125;JobExecutor作业启动器1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/** * 作业启动器. * * @author zhangliang */@Slf4j@Getterpublic class JobExecutor &#123; private final String jobName; //分布式注册中心 private final CoordinatorRegistryCenter regCenter; //作业具体执行器 private final ElasticJob elasticJob; //为调度器提供内部服务的门面类 private final SchedulerFacade schedulerFacade; /** * 初始化作业. */ public void init() &#123; log.debug("Elastic job: job controller init, job name is: &#123;&#125;.", jobName); //清楚上次作业状态信息 schedulerFacade.clearPreviousServerStatus(); //向注册中心注册当前任务 regCenter.addCacheData("/" + jobName); //注册Elastic-Job启动信息 schedulerFacade.registerStartUpInfo(); &#125; public JobExecutor(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final ElasticJobListener... elasticJobListeners) &#123; jobName = jobConfig.getJobName(); this.regCenter = regCenter; List&lt;ElasticJobListener&gt; elasticJobListenerList = Arrays.asList(elasticJobListeners); setGuaranteeServiceForElasticJobListeners(regCenter, jobConfig, elasticJobListenerList); elasticJob = createElasticJob(jobConfig, elasticJobListenerList); schedulerFacade = new SchedulerFacade(regCenter, jobConfig, elasticJobListenerList); &#125; private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final List&lt;ElasticJobListener&gt; elasticJobListeners) &#123; GuaranteeService guaranteeService = new GuaranteeService(regCenter, jobConfig); for (ElasticJobListener each : elasticJobListeners) &#123; if (each instanceof AbstractDistributeOnceElasticJobListener) &#123; ((AbstractDistributeOnceElasticJobListener) each).setGuaranteeService(guaranteeService); &#125; &#125; &#125; private ElasticJob createElasticJob(final JobConfiguration jobConfig, final List&lt;ElasticJobListener&gt; elasticJobListenerList) &#123; ElasticJob result; try &#123; result = (ElasticJob) jobConfig.getJobClass().newInstance(); &#125; catch (final InstantiationException | IllegalAccessException ex) &#123; throw new JobException(ex); &#125; result.setJobFacade(new JobFacade(regCenter, jobConfig, elasticJobListenerList)); return result; &#125;&#125;注册中心模块123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657@Override public void init() &#123; //如果开关开启，则启动zk内部服务器，提供job节点注册服务 if (zkConfig.isUseNestedZookeeper()) &#123; NestedZookeeperServers.getInstance().startServerIfNotStarted(zkConfig.getNestedPort(), zkConfig.getNestedDataDir()); &#125; log.debug("Elastic job: zookeeper registry center init, server lists is: &#123;&#125;.", zkConfig.getServerLists()); //创建zk连接客户端 Builder builder = CuratorFrameworkFactory.builder() .connectString(zkConfig.getServerLists()) .retryPolicy(new ExponentialBackoffRetry( zkConfig.getBaseSleepTimeMilliseconds(), zkConfig.getMaxRetries(), zkConfig.getMaxSleepTimeMilliseconds())) .namespace(zkConfig.getNamespace()); if (0 != zkConfig.getSessionTimeoutMilliseconds()) &#123; builder.sessionTimeoutMs(zkConfig.getSessionTimeoutMilliseconds()); &#125; if (0 != zkConfig.getConnectionTimeoutMilliseconds()) &#123; builder.connectionTimeoutMs(zkConfig.getConnectionTimeoutMilliseconds()); &#125; //根据配置，开启权限验证 if (!Strings.isNullOrEmpty(zkConfig.getDigest())) &#123; builder.authorization("digest", zkConfig.getDigest().getBytes(Charset.forName("UTF-8"))) .aclProvider(new ACLProvider() &#123; @Override public List&lt;ACL&gt; getDefaultAcl() &#123; return ZooDefs.Ids.CREATOR_ALL_ACL; &#125; @Override public List&lt;ACL&gt; getAclForPath(final String path) &#123; return ZooDefs.Ids.CREATOR_ALL_ACL; &#125; &#125;); &#125; client = builder.build(); client.start(); try &#123; //客户端锁定并尝试连接注册中心 client.blockUntilConnected(zkConfig.getMaxSleepTimeMilliseconds() * zkConfig.getMaxRetries(), TimeUnit.MILLISECONDS); if (!client.getZookeeperClient().isConnected()) &#123; throw new KeeperException.OperationTimeoutException(); &#125; if (!Strings.isNullOrEmpty(zkConfig.getLocalPropertiesPath())) &#123; //根据路径读取配置文件，并创建节点 fillData(); &#125; //CHECKSTYLE:OFF &#125; catch (final Exception ex) &#123; //CHECKSTYLE:ON RegExceptionHandler.handleException(ex); &#125; &#125;plugin模块中的三种作业类型elastic-job提供了三种类型的作业：Simple类型作业、Dataflow类型作业、Script类型作业。这里主要讲解前两者。Script类型作业意为脚本类型作业，支持shell，python，perl等所有类型脚本，使用不多，可以参见github文档。SimpleJob需要实现SimpleJob接口，意为简单实现，未经过任何封装，与quartz原生接口相似，比如示例代码中所使用的job。12345678910111213141516171819202122232425/** * 简单的分布式作业. * * &lt;p&gt; * 仅保证作业可被分布式定时调用, 不提供任何作业处理逻辑. * &lt;/p&gt; * * @author zhangliang * @author caohao */@Slf4jpublic abstract class AbstractSimpleElasticJob extends AbstractElasticJob &#123; @Override protected final void executeJob(final JobExecutionMultipleShardingContext shardingContext) &#123; process(shardingContext); &#125; /** * 执行作业. * * @param shardingContext 作业分片规则配置上下文 */ public abstract void process(final JobExecutionMultipleShardingContext shardingContext);&#125;Dataflow类型用于处理数据流，需实现DataflowJob接口。该接口提供2个方法可供覆盖，分别用于抓取(fetchData)和处理(processData)数据。可通过DataflowJobConfiguration配置是否流式处理。流式处理数据只有fetchData方法的返回值为null或集合长度为空时，作业才停止抓取，否则作业将一直运行下去； 非流式处理数据则只会在每次作业执行过程中执行一次fetchData方法和processData方法，随即完成本次作业。实际开发中，Dataflow类型的job还是很有好用的。12345678910111213141516171819202122232425262728293031323334353637383940/** * 保证同一分片顺序性的批量处理数据流程的作业. * * @author zhangliang * * @param &lt;T&gt; 数据流作业处理的数据实体类型 */public abstract class AbstractBatchSequenceDataFlowElasticJob&lt;T&gt; extends AbstractBatchDataFlowElasticJob&lt;T, JobExecutionSingleShardingContext&gt; &#123;&#125;/** * 高吞吐量批量处理数据流程的作业. * * @author zhangliang * * @param &lt;T&gt; 数据流作业处理的数据实体类型 */public abstract class AbstractBatchThroughputDataFlowElasticJob&lt;T&gt; extends AbstractBatchDataFlowElasticJob&lt;T, JobExecutionMultipleShardingContext&gt; &#123;&#125;/** * 保证同一分片顺序性的逐条处理数据流程的作业. * * @author zhangliang * * @param &lt;T&gt; 数据流作业处理的数据实体类型 */public abstract class AbstractIndividualSequenceDataFlowElasticJob&lt;T&gt; extends AbstractIndividualDataFlowElasticJob&lt;T, JobExecutionSingleShardingContext&gt; &#123;&#125;/** * 高吞吐量逐条处理数据流程的作业. * * @author zhangliang * * @param &lt;T&gt; 数据流作业处理的数据实体类型 */public abstract class AbstractIndividualThroughputDataFlowElasticJob&lt;T&gt; extends AbstractIndividualDataFlowElasticJob&lt;T, JobExecutionMultipleShardingContext&gt; &#123;&#125;plugin中的分片策略AverageAllocationJobShardingStrategy：基于平均分配算法的分片策略；OdevitySortByNameJobShardingStrategy：根据作业名的哈希值奇偶数决定IP升降序算法的分片策略；RotateServerByNameJobShardingStrategy：根据作业名的哈希值对服务器列表进行轮转的分片策略；12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * 基于平均分配算法的分片策略. * * &lt;p&gt; * 如果分片不能整除, 则不能整除的多余分片将依次追加到序号小的服务器. * 如: * 1. 如果有3台服务器, 分成9片, 则每台服务器分到的分片是: 1=[0,1,2], 2=[3,4,5], 3=[6,7,8]. * 2. 如果有3台服务器, 分成8片, 则每台服务器分到的分片是: 1=[0,1,6], 2=[2,3,7], 3=[4,5]. * 3. 如果有3台服务器, 分成10片, 则每台服务器分到的分片是: 1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8]. * &lt;/p&gt; * * @author zhangliang */public final class AverageAllocationJobShardingStrategy implements JobShardingStrategy &#123; @Override public Map&lt;String, List&lt;Integer&gt;&gt; sharding(final List&lt;String&gt; serversList, final JobShardingStrategyOption option) &#123; if (serversList.isEmpty()) &#123; return Collections.emptyMap(); &#125; Map&lt;String, List&lt;Integer&gt;&gt; result = shardingAliquot(serversList, option.getShardingTotalCount()); addAliquant(serversList, option.getShardingTotalCount(), result); return result; &#125; //平均分配前面若干项 private Map&lt;String, List&lt;Integer&gt;&gt; shardingAliquot(final List&lt;String&gt; serversList, final int shardingTotalCount) &#123; Map&lt;String, List&lt;Integer&gt;&gt; result = new LinkedHashMap&lt;&gt;(serversList.size()); int itemCountPerSharding = shardingTotalCount / serversList.size(); int count = 0; for (String each : serversList) &#123; List&lt;Integer&gt; shardingItems = new ArrayList&lt;&gt;(itemCountPerSharding + 1); for (int i = count * itemCountPerSharding; i &lt; (count + 1) * itemCountPerSharding; i++) &#123; shardingItems.add(i); &#125; result.put(each, shardingItems); count++; &#125; return result; &#125; //追加不能整除的分片索引 private void addAliquant(final List&lt;String&gt; serversList, final int shardingTotalCount, final Map&lt;String, List&lt;Integer&gt;&gt; shardingResult) &#123; int aliquant = shardingTotalCount % serversList.size(); int count = 0; for (Entry&lt;String, List&lt;Integer&gt;&gt; entry : shardingResult.entrySet()) &#123; if (count &lt; aliquant) &#123; entry.getValue().add(shardingTotalCount / serversList.size() * serversList.size() + count); &#125; count++; &#125; &#125;&#125;123456789101112131415161718192021222324252627/** * 根据作业名的哈希值奇偶数决定IP升降序算法的分片策略. * * &lt;p&gt; * 作业名的哈希值为奇数则IP升序. * 作业名的哈希值为偶数则IP降序. * 用于不同的作业平均分配负载至不同的服务器. * 如: * 1. 如果有3台服务器, 分成2片, 作业名称的哈希值为奇数, 则每台服务器分到的分片是: 1=[0], 2=[1], 3=[]. * 2. 如果有3台服务器, 分成2片, 作业名称的哈希值为偶数, 则每台服务器分到的分片是: 3=[0], 2=[1], 1=[]. * &lt;/p&gt; * * @author zhangliang */public final class OdevitySortByNameJobShardingStrategy implements JobShardingStrategy &#123; private AverageAllocationJobShardingStrategy averageAllocationJobShardingStrategy = new AverageAllocationJobShardingStrategy(); @Override public Map&lt;String, List&lt;Integer&gt;&gt; sharding(final List&lt;String&gt; serversList, final JobShardingStrategyOption option) &#123; long jobNameHash = option.getJobName().hashCode(); if (0 == jobNameHash % 2) &#123; Collections.reverse(serversList); &#125; return averageAllocationJobShardingStrategy.sharding(serversList, option); &#125;&#125;1234567891011121314151617181920212223242526272829/** * 根据作业名的哈希值对服务器列表进行轮转的分片策略. * 向左偏移offset位之后进行平均分配 * * @author weishubin */public class RotateServerByNameJobShardingStrategy implements JobShardingStrategy &#123; private AverageAllocationJobShardingStrategy averageAllocationJobShardingStrategy = new AverageAllocationJobShardingStrategy(); @Override public Map&lt;String, List&lt;Integer&gt;&gt; sharding(final List&lt;String&gt; serversList, final JobShardingStrategyOption option) &#123; return averageAllocationJobShardingStrategy.sharding(rotateServerList(serversList, option.getJobName()), option); &#125; private List&lt;String&gt; rotateServerList(final List&lt;String&gt; serversList, final String jobName) &#123; int serverSize = serversList.size(); int offset = Math.abs(jobName.hashCode()) % serverSize; if (0 == offset) &#123; return serversList; &#125; List&lt;String&gt; result = new ArrayList&lt;&gt;(serverSize); for (int i = 0; i &lt; serverSize; i++) &#123; int index = (i + offset) % serverSize; result.add(serversList.get(index)); &#125; return result; &#125;&#125;]]></content>
      <tags>
        <tag>elastic-job</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elastic-job源码浅析-任务执行过程]]></title>
    <url>%2F2018%2F10%2F25%2Felastic-job%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90-%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[启动过程流程图流程图详细地描述了各个作业细节的执行过程，看上去流程非常复杂，其主要的功能点为：判断作业是否可执行，判断作业是否分片执行，作业执行状态监听，作业失效转移等。下面我们结合代码一步步窥探他的执行过程。核心源码分析作业入口123456789101112131415/** * Elastic Job Lite提供的Quartz封装作业. * * @author zhangliang */public class LiteJob implements Job &#123; @Setter private ElasticJob elasticJob; @Override public void execute(final JobExecutionContext context) throws JobExecutionException &#123; elasticJob.execute(); &#125;&#125;LiteJob实现了Quartz的Job接口，并且持有elasticJob的实现类，通过代理的方式实现了ElasticJob与Quartz的无缝衔接；【亮点】这是一种典型的代理模式，其好处在于体验上完全与Quartz的Job一致，并且遵循了代码的开闭原则，使得代码具有很好地拓展性：例如ElasticJob接口有SimpleJob，DataFlowJob或者用户自定义的多种实现类，因此具有很好地拓展性。AbstractElasticJob抽象类及其原理12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091/** * 弹性化分布式作业的基类. * * @author zhangliang * @author caohao */@Slf4jpublic abstract class AbstractElasticJob implements ElasticJob &#123; //具体的业务实现放在jobFacade门面类中实现，简化代码复杂度 private JobFacade jobFacade; @Override public final void execute() &#123; log.trace("Elastic job: job execute begin."); //判断与注册中心时间差是否在允许范围内 jobFacade.checkMaxTimeDiffSecondsTolerable(); //获取分片上下文 JobExecutionMultipleShardingContext shardingContext = jobFacade.getShardingContext(); //若前面的任务仍在执行，则设置错过执行标记，延迟执行 if (jobFacade.misfireIfNecessary(shardingContext.getShardingItems())) &#123; log.debug("Elastic job: previous job is still running, new job will start after previous job completed. Misfired job had recorded."); return; &#125; //清除作业上次执行的信息 jobFacade.cleanPreviousExecutionInfo(); try &#123; //各监听器执行job执行前方法 jobFacade.beforeJobExecuted(shardingContext); //CHECKSTYLE:OFF &#125; catch (final Throwable cause) &#123; //CHECKSTYLE:ON handleJobExecutionException(new JobException(cause)); &#125; //执行具体的job业务逻辑 executeJobInternal(shardingContext); log.trace("Elastic job: execute normal completed, sharding context:&#123;&#125;.", shardingContext); while (jobFacade.isExecuteMisfired(shardingContext.getShardingItems())) &#123; log.trace("Elastic job: execute misfired job, sharding context:&#123;&#125;.", shardingContext); jobFacade.clearMisfire(shardingContext.getShardingItems()); executeJobInternal(shardingContext); log.trace("Elastic job: misfired job completed, sharding context:&#123;&#125;.", shardingContext); &#125; //按需失效转移 jobFacade.failoverIfNecessary(); try &#123; //执行监听后事件 jobFacade.afterJobExecuted(shardingContext); //CHECKSTYLE:OFF &#125; catch (final Throwable cause) &#123; //CHECKSTYLE:ON handleJobExecutionException(new JobException(cause)); &#125; log.trace("Elastic job: execute all completed."); &#125; private void executeJobInternal(final JobExecutionMultipleShardingContext shardingContext) &#123; if (shardingContext.getShardingItems().isEmpty()) &#123; log.trace("Elastic job: sharding item is empty, job execution context:&#123;&#125;.", shardingContext); return; &#125; //注册任务执行信息 jobFacade.registerJobBegin(shardingContext); try &#123; executeJob(shardingContext); //CHECKSTYLE:OFF &#125; catch (final Throwable cause) &#123; //CHECKSTYLE:ON handleJobExecutionException(new JobException(cause)); &#125; finally &#123; // TODO 考虑增加作业失败的状态，并且考虑如何处理作业失败的整体回路 jobFacade.registerJobCompleted(shardingContext); &#125; &#125; protected abstract void executeJob(final JobExecutionMultipleShardingContext shardingContext); @Override public void handleJobExecutionException(final JobException jobException) &#123; log.error("Elastic job: exception occur in job processing...", jobException.getCause()); &#125; @Override public final JobFacade getJobFacade() &#123; return jobFacade; &#125; @Override public final void setJobFacade(final JobFacade jobFacade) &#123; this.jobFacade = jobFacade; &#125;【亮点】外观模式传送门上面的代码中应用到了外观模式（Facade），AbstractElasticJob持有jobFacade对象，Elasticjob负责统筹整体的job执行流程但无需关注业务的具体实现，转而将复杂的业务处理逻辑交由jobFacade中的方法进行处理，从而将job与具体的业务逻辑抽离出来方便阅读和拓展。]]></content>
      <tags>
        <tag>elastic-job</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elastic-job源码浅析-任务初始化]]></title>
    <url>%2F2018%2F10%2F25%2Felastic-job%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90-%E4%BB%BB%E5%8A%A1%E5%88%9D%E5%A7%8B%E5%8C%96%2F</url>
    <content type="text"><![CDATA[作业过程源码分析核心入口：JobScheduler作业调度器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * 作业调度器. * * @author zhangliang * @author caohao */public class JobScheduler &#123; private static final String SCHEDULER_INSTANCE_NAME_SUFFIX = "Scheduler"; private static final String CRON_TRIGGER_IDENTITY_SUFFIX = "Trigger"; //作业启动器 private final JobExecutor jobExecutor; public JobScheduler(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final ElasticJobListener... elasticJobListeners) &#123; jobExecutor = new JobExecutor(regCenter, jobConfig, elasticJobListeners); &#125; /** * 初始化作业. */ public void init() &#123; //作业启动器初始化 jobExecutor.init(); //建造者模式构造jobDetail JobDetail jobDetail = JobBuilder.newJob(LiteJob.class).withIdentity(jobExecutor.getJobName()).build(); //保留job的状态信息 jobDetail.getJobDataMap().put("elasticJob", jobExecutor.getElasticJob()); JobScheduleController jobScheduleController; try &#123; //实例化作业调度控制器 jobScheduleController = new JobScheduleController( initializeScheduler(jobDetail.getKey().toString()), jobDetail, jobExecutor.getSchedulerFacade(), Joiner.on("_").join(jobExecutor.getJobName(), CRON_TRIGGER_IDENTITY_SUFFIX)); jobScheduleController.scheduleJob(jobExecutor.getSchedulerFacade().getCron()); &#125; catch (final SchedulerException ex) &#123; throw new JobException(ex); &#125; //向作业注册表注册JobScheduleController实例 JobRegistry.getInstance().addJobScheduleController(jobExecutor.getJobName(), jobScheduleController); &#125; private Scheduler initializeScheduler(final String jobName) throws SchedulerException &#123; //工厂方法构造quartz的Scheduler实例 StdSchedulerFactory factory = new StdSchedulerFactory(); factory.initialize(getBaseQuartzProperties(jobName)); Scheduler result = factory.getScheduler(); //注册Trigger监听事件 result.getListenerManager().addTriggerListener(jobExecutor.getSchedulerFacade().newJobTriggerListener()); return result; &#125; private Properties getBaseQuartzProperties(final String jobName) &#123; Properties result = new Properties(); result.put("org.quartz.threadPool.class", org.quartz.simpl.SimpleThreadPool.class.getName()); //并发执行线程数为1，意味着job任务同步执行，防止同一个任务执行时间过长被重复执行 result.put("org.quartz.threadPool.threadCount", "1"); result.put("org.quartz.scheduler.instanceName", Joiner.on("_").join(jobName, SCHEDULER_INSTANCE_NAME_SUFFIX)); if (!jobExecutor.getSchedulerFacade().isMisfire()) &#123; result.put("org.quartz.jobStore.misfireThreshold", "1"); &#125; prepareEnvironments(result); return result; &#125; //钩子方法，用于子类覆盖 protected void prepareEnvironments(final Properties props) &#123; &#125; &#125;JobExecutor作业启动器1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/** * 作业启动器. * * @author zhangliang */@Slf4j@Getterpublic class JobExecutor &#123; private final String jobName; //分布式注册中心 private final CoordinatorRegistryCenter regCenter; //作业具体执行器 private final ElasticJob elasticJob; //为调度器提供内部服务的门面类 private final SchedulerFacade schedulerFacade; /** * 初始化作业. */ public void init() &#123; log.debug("Elastic job: job controller init, job name is: &#123;&#125;.", jobName); //清楚上次作业状态信息 schedulerFacade.clearPreviousServerStatus(); //向注册中心注册当前任务 regCenter.addCacheData("/" + jobName); //注册Elastic-Job启动信息 schedulerFacade.registerStartUpInfo(); &#125; public JobExecutor(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final ElasticJobListener... elasticJobListeners) &#123; jobName = jobConfig.getJobName(); this.regCenter = regCenter; List&lt;ElasticJobListener&gt; elasticJobListenerList = Arrays.asList(elasticJobListeners); setGuaranteeServiceForElasticJobListeners(regCenter, jobConfig, elasticJobListenerList); elasticJob = createElasticJob(jobConfig, elasticJobListenerList); schedulerFacade = new SchedulerFacade(regCenter, jobConfig, elasticJobListenerList); &#125; private void setGuaranteeServiceForElasticJobListeners(final CoordinatorRegistryCenter regCenter, final JobConfiguration jobConfig, final List&lt;ElasticJobListener&gt; elasticJobListeners) &#123; GuaranteeService guaranteeService = new GuaranteeService(regCenter, jobConfig); for (ElasticJobListener each : elasticJobListeners) &#123; if (each instanceof AbstractDistributeOnceElasticJobListener) &#123; ((AbstractDistributeOnceElasticJobListener) each).setGuaranteeService(guaranteeService); &#125; &#125; &#125; private ElasticJob createElasticJob(final JobConfiguration jobConfig, final List&lt;ElasticJobListener&gt; elasticJobListenerList) &#123; ElasticJob result; try &#123; result = (ElasticJob) jobConfig.getJobClass().newInstance(); &#125; catch (final InstantiationException | IllegalAccessException ex) &#123; throw new JobException(ex); &#125; result.setJobFacade(new JobFacade(regCenter, jobConfig, elasticJobListenerList)); return result; &#125;&#125;JobFacade门面类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103/** * 为调度器提供内部服务的门面类. * * @author zhangliang */public class SchedulerFacade &#123; private final ConfigurationService configService; private final LeaderElectionService leaderElectionService; private final ServerService serverService; private final ShardingService shardingService; private final ExecutionService executionService; private final StatisticsService statisticsService; private final MonitorService monitorService; private final ListenerManager listenerManager; public SchedulerFacade(final CoordinatorRegistryCenter coordinatorRegistryCenter, final JobConfiguration jobConfiguration, final List&lt;ElasticJobListener&gt; elasticJobListeners) &#123; configService = new ConfigurationService(coordinatorRegistryCenter, jobConfiguration); leaderElectionService = new LeaderElectionService(coordinatorRegistryCenter, jobConfiguration); serverService = new ServerService(coordinatorRegistryCenter, jobConfiguration); shardingService = new ShardingService(coordinatorRegistryCenter, jobConfiguration); executionService = new ExecutionService(coordinatorRegistryCenter, jobConfiguration); statisticsService = new StatisticsService(coordinatorRegistryCenter, jobConfiguration); monitorService = new MonitorService(coordinatorRegistryCenter, jobConfiguration); listenerManager = new ListenerManager(coordinatorRegistryCenter, jobConfiguration, elasticJobListeners); &#125; /** * 每次作业启动前清理上次运行状态. */ public void clearPreviousServerStatus() &#123; serverService.clearPreviousServerStatus(); &#125; /** * 注册Elastic-Job启动信息. */ public void registerStartUpInfo() &#123; //启动各类监听器 listenerManager.startAllListeners(); //强制选举主节点 leaderElectionService.leaderForceElection(); //zk中持久化分布式作业配置信息 configService.persistJobConfiguration(); //zk中持久化作业服务器上线相关信息. serverService.persistServerOnline(); //清除暂停作业的标记. serverService.clearJobPausedStatus(); if (JobType.DATA_FLOW == configService.getJobType()) &#123; //异步开启统计处理数据数量的作业 statisticsService.startProcessCountJob(); &#125; //设置需要重新分片的标记 shardingService.setReshardingFlag(); //初始化作业监控服务 monitorService.listen(); &#125; /** * 释放作业占用的资源. */ public void releaseJobResource() &#123; monitorService.close(); if (JobType.DATA_FLOW.equals(configService.getJobType())) &#123; statisticsService.stopProcessCountJob(); &#125; serverService.removeServerStatus(); &#125; /** * 获取作业启动时间的cron表达式. * * @return 作业启动时间的cron表达式 */ public String getCron() &#123; return configService.getCron(); &#125; /** * 获取是否开启misfire. * * @return 是否开启misfire */ public boolean isMisfire() &#123; return configService.isMisfire(); &#125; /** * 获取作业触发监听器. * * @return 作业触发监听器 */ public JobTriggerListener newJobTriggerListener() &#123; return new JobTriggerListener(executionService, shardingService); &#125;&#125;作业注册表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * 作业注册表. * * @author zhangliang * @author caohao *///多线程双检锁：保证单例线程安全@NoArgsConstructor(access = AccessLevel.PRIVATE)public final class JobRegistry &#123; //为什么要用volatile关键字？ private static volatile JobRegistry instance; //全局的作业被以map形式缓存在注册表单例中 private Map&lt;String, JobScheduleController&gt; schedulerMap = new ConcurrentHashMap&lt;&gt;(); /** * 获取作业注册表实例. * * @return 作业注册表实例 */ public static JobRegistry getInstance() &#123; if (null == instance) &#123; synchronized (JobRegistry.class) &#123; if (null == instance) &#123; //实际上实例化分为分配内存和执行构造方法两部分，如果不加volatile，会导致指令重排序，导致构造方法先被执行。 //而另一个线程到达临界区代码段，从而获取到一个未被完全实例化的instance。 instance = new JobRegistry(); &#125; &#125; &#125; return instance; &#125; /** * 添加作业调度控制器. * * @param jobName 作业名称 * @param jobScheduleController 作业调度控制器 */ public void addJobScheduleController(final String jobName, final JobScheduleController jobScheduleController) &#123; schedulerMap.put(jobName, jobScheduleController); &#125; /** * 获取作业调度控制器. * * @param jobName 作业名称 * @return 作业调度控制器 */ public JobScheduleController getJobScheduleController(final String jobName) &#123; return schedulerMap.get(jobName); &#125;&#125;]]></content>
      <tags>
        <tag>elastic-job</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elastic-job源码浅析-架构篇]]></title>
    <url>%2F2018%2F10%2F25%2Felastic-job%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90-%E6%9E%B6%E6%9E%84%E7%AF%87%2F</url>
    <content type="text"><![CDATA[源码阅读小技巧传送门写在前面elastic-job是当当开源的一款非常好用的作业框架，在此之前，任务调度的主流框架是quartZ或者spring-task。两者均不能很好地支持高并发量的分布式任务调度，即使是号称拥有集群能力的quartZ也仅仅保证了job的高可用，单一时刻只能有一台机器执行具体的调度任务。因此，老牌劲旅无法解决两个迫切的需求点：1.quartZ的集群仅仅是用于实现HA（high avalible),无法实现高并发；2.无论quartZ还是spring-task，均无法很好地实现水平拓展；1Elastic-Job is a distributed scheduled job framework, based on Quartz and Zookeeper.上述文字是elastic-job github主页对它的描述，从上面的描述中我们可以看到两个关键字Quartz和Zookeeper，基于以上两个基础框架，Elastic-job实现了高可用和高并发。elastic-job解决了那些问题举个典型的job场景，比如余额宝里的昨日收益，系统需要job在每天某个时间点开始，给所有余额宝用户计算收益。如果用户数量不多，我们可以轻易使用quartz来完成，我们让计息job在某个时间点开始执行，循环遍历所有用户计算利息，这没问题。可是，如果用户体量特别大，我们可能会面临着在第二天之前处理不完这么多用户。另外，我们部署job的时候也得注意，我们可能会把job直接放在我们的webapp里，webapp通常是多节点部署的，这样，我们的job也就是多节点，多个job同时执行，很容易造成重复执行，比如用户重复计息，为了避免这种情况，我们可能会对job的执行加锁，保证始终只有一个节点能执行，或者干脆让job从webapp里剥离出来，独自部署一个节点。elastic-job就可以帮助我们解决上面的问题，elastic底层的任务调度还是使用的quartz，通过zookeeper来动态给job节点分片。我们来看：很大体量的用户需要在特定的时间段内计息完成我们肯定是希望我们的任务可以通过集群达到水平扩展，集群里的每个节点都处理部分用户，不管用户数量有多庞大，我们只要增加机器就可以了，比如单台机器特定时间能处理n个用户，2台机器处理2n个用户，3台3n，4台4n…，再多的用户也不怕了。使用elastic-job开发的作业都是zookeeper的客户端，比如我希望3台机器跑job，我们将任务分成3片，框架通过zk的协调，最终会让3台机器分别分配到0,1,2的任务片，比如server0–&gt;0，server1–&gt;1，server2–&gt;2，当server0执行时，可以只查询id%3==0的用户，server1执行时，只查询id%3==1的用户，server2执行时，只查询id%3==2的用户。任务部署多节点引发重复执行在上面的基础上，我们再增加server3，此时，server3分不到任务分片，因为只有3片，已经分完了。没有分到任务分片的作业程序将不执行。如果此时server2挂了，那么server2的分片项会分配给server3，server3有了分片，就会替代server2执行。如果此时server3也挂了，只剩下server0和server1了，框架也会自动把server3的分片随机分配给server0或者server1，可能会这样，server0–&gt;0，server1–&gt;1,2。这种特性称之为弹性扩容，即elastic-job名称的由来。上述的引用比较冗长，简单地理解就是elastic-job利用zk的分布式集群管理能力，对job节点进行的弹性扩容和收缩。同时任务分片的方式保证了job执行的并发能力和防止重复执行，使任务调度不仅拥有高可用，也具备了水平拓展和高并发能力。elastic-job结构elastic-job架构图任务节点数据结构elastic-job模块简析core的主要的模块分为:job模块：plugin(内含三种不同的作业类型,分片策略)，api(对外暴露的api服务)，exception(异常类)，internal(内部模块)reg(注册中心)模块：base(基类)，异常处理模块，zookeeper注册中心模块]]></content>
      <tags>
        <tag>elastic-job</tag>
        <tag>源码</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo优化攻略]]></title>
    <url>%2F2018%2F10%2F25%2Fhexo%E4%BC%98%E5%8C%96%E6%94%BB%E7%95%A5%2F</url>
    <content type="text"><![CDATA[写在前面这个攻略主要是给有一定diy能力的hexo博主。一些细节的攻略可以参考如下文章：hexo 基础配置优化插件进阶静态代码压缩文章比较长的情况下网页往往会显示地较慢。因此，需要对静态代码进行压缩，以提高网站的响应速度。1npm install hexo-all-minifier --save在hexo根目录下的_config.yml中配置:12345678910111213141516171819202122232425262728# 代码压缩 github.com/chenzhutian/hexo-all-minifierall_minifier: truehtml_minifier: enable: true ignore_error: false exclude: css_minifier: enable: true exclude: - '*.min.css'js_minifier: enable: true mangle: true output: compress: exclude: - '*.min.js'image_minifier: enable: false # 图片不压缩 interlaced: false multipass: false optimizationLevel: 2 pngquant: false progressive: false文章加密插件安装1npm install hexo-encrypt --save在项目_config.yml中声名默认密码123#该密码为全局默认密码encrypt: password: 你的密码在文章头加入密码配置12encrypt: trueenc_pwd: 你的文章独立密码在根目录的package.json中追加配置，记得补全“,”1"hexo-encrypt": "^0.2.0"最终效果网站顶部进度条在{hexo-path}/themes/next/layout/_partials/head/head.swig中顶部加入如下代码123456789101112131415&lt;script src="//cdn.bootcss.com/pace/1.0.2/pace.min.js"&gt;&lt;/script&gt;&lt;link href="//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css" rel="stylesheet"&gt;&lt;style&gt;.pace .pace-progress &#123; background: #f6a427; /*进度条颜色*/ height: 3px;&#125;.pace .pace-progress-inner &#123; box-shadow: 0 0 10px #1E92FB, 0 0 5px #1E92FB; /*阴影颜色*/&#125;.pace .pace-activity &#123; border-top-color: #1E92FB; /*上边框颜色*/ border-left-color: #1E92FB; /*左边框颜色*/&#125;&lt;/style&gt;效果图]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>优化</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于装修的一点想法]]></title>
    <url>%2F2018%2F10%2F25%2F%E5%85%B3%E4%BA%8E%E8%A3%85%E4%BF%AE%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95%2F</url>
    <content type="text"><![CDATA[装修风格的讨论在这个宅基地很难批准的时候，终于可以造房子了。楼房的样式是那种两层平层 + 一层别墅式的样子，虽然比不上欧式的新颖，但是空间足够大，四平八稳的风格还算能接受。对于装修风格，和瓢羹同学也有一些讨论。一开始瓢羹同学认为欧式的辉煌装修风格不错，但是我觉得有点老土。于是呢，她说北欧性冷风不错，我也觉得可以，只是美中不足的是有点暗色调，不适合居家。我呢，有点青睐于和风的风格，比较的小资。但是，作为自建房格调又显得有点小气了。所以，经过一番博弈，我们最终把两种风格进行了mix——其实我们不是一定青睐和风，亦或是北欧。后来我们发现，我们只是对原木风比较感冒。原木材质的纹理，配合较大空间的色彩搭配，整体给人一种居家的舒适感和归属感。同时，又比较有格调。要准备的工作从目前来看打的轮廓和格局已经敲定了，但是整体装修的渲染还没出来，准备抽空到酷家乐搞一波装修效果图。到时候看看整体下来的装修效果如何。全景预览全景图传送门装修效果图装修资料酷家乐 有好几套比较合理的和风装修来自酷家乐，吊顶采用了比较简约的纯白+造型别致的灯具，这个风格我们都比较喜欢。易盖房 小别墅一些样式比较讨巧，看着比较舒服。]]></content>
      <tags>
        <tag>酷玩</tag>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员养生秘笈]]></title>
    <url>%2F2018%2F10%2F21%2F%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%85%BB%E7%94%9F%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>程序员</tag>
        <tag>养生</tag>
        <tag>码农</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 源码阅读]]></title>
    <url>%2F2018%2F10%2F19%2Fspring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[对于spring源码的一些个人的见解！！！spring 核心代码12345参考资料：spring源码深度解析Spring版本：Spring-4.3.5-RELEASE吐槽下，老外写的东西真晕啊，像亲妈一样啰啰嗦嗦帮你考虑了各种情况，然后最好还不忘加一句：如果你不满意，还可以拓展！！！核心流程初始化过程非常清晰的模板方法，每一个步骤封装成一个具体的函数进行代理，职责清晰明了；12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273@Overridepublic void refresh() throws BeansException, IllegalStateException &#123; synchronized (this.startupShutdownMonitor) &#123; //预热，做准备工作 prepareRefresh(); // Tell the subclass to refresh the internal bean factory. //获取内部的bean factory ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); // Prepare the bean factory for use in this context. //预热beanFactory prepareBeanFactory(beanFactory); try &#123; // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory(beanFactory); // Invoke factory processors registered as beans in the context. //beanFactory在上下文中注册bean，核心的代码就在这里 invokeBeanFactoryPostProcessors(beanFactory); // Register bean processors that intercept bean creation. // bean创建的时候拦截并注册bean处理器，这里只创建处理器，真正的创建是在getBean(..)方法里 registerBeanPostProcessors(beanFactory); // Initialize message source for this context. // 用于支持国际化，比如一些日志的国际化匹配等； initMessageSource(); // 为上下文初始化消息传播工具 initApplicationEventMulticaster(); // Initialize other special beans in specific context subclasses. // 钩子方法：额外的beans处理方法 onRefresh(); // Check for listener beans and register them. // 注册监听器 registerListeners(); // Instantiate all remaining (non-lazy-init) singletons. // 实例化非延时加载的bean单例 finishBeanFactoryInitialization(beanFactory); // Last step: publish corresponding event. // push beans创建完成的消息 finishRefresh(); &#125; catch (BeansException ex) &#123; if (logger.isWarnEnabled()) &#123; logger.warn("Exception encountered during context initialization - " + "cancelling refresh attempt: " + ex); &#125; // Destroy already created singletons to avoid dangling resources. destroyBeans(); // Reset 'active' flag. cancelRefresh(ex); // Propagate exception to caller. throw ex; &#125; finally &#123; // Reset common introspection caches in Spring's core, since we // might not ever need metadata for singleton beans anymore... resetCommonCaches(); &#125; &#125;&#125;spring 类加载的基本类spring DefaultListableBeanFactory UML示意图：spring bean 创建过程转换beanName尝试从缓存中获取单例bean本身的实例化原型模式依赖检测parentBeanFactory 检测将gernerecBeanDefinition 转换成 RootBeanDefination寻找依赖根据scope 初始化(init)对应的bean类型转换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171/** * Return an instance, which may be shared or independent, of the specified bean. * @param name the name of the bean to retrieve * @param requiredType the required type of the bean to retrieve * @param args arguments to use when creating a bean instance using explicit arguments * (only applied when creating a new instance as opposed to retrieving an existing one) * @param typeCheckOnly whether the instance is obtained for a type check, * not for actual use * @return an instance of the bean * @throws BeansException if the bean could not be created */@SuppressWarnings("unchecked")protected &lt;T&gt; T doGetBean( final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException &#123; //转换beanName，我们知道在spring中，bean factory的名称都是类似于 &amp;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory //因此获取的时候需要进行转换 final String beanName = transformedBeanName(name); Object bean; // Eagerly check singleton cache for manually registered singletons. // 尝试从缓存中获取单例 Object sharedInstance = getSingleton(beanName); if (sharedInstance != null &amp;&amp; args == null) &#123; if (logger.isDebugEnabled()) &#123; if (isSingletonCurrentlyInCreation(beanName)) &#123; logger.debug("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference"); &#125; else &#123; logger.debug("Returning cached instance of singleton bean '" + beanName + "'"); &#125; &#125; //实例化 bean = getObjectForBeanInstance(sharedInstance, name, beanName, null); &#125; else &#123; // Fail if we're already creating this bean instance: // We're assumably within a circular reference. // 检测当前依赖的类是否正在创建，如果是，则抛出异常 if (isPrototypeCurrentlyInCreation(beanName)) &#123; throw new BeanCurrentlyInCreationException(beanName); &#125; // Check if bean definition exists in this factory. // 如果bean配置不存在则只能去父工厂找 BeanFactory parentBeanFactory = getParentBeanFactory(); if (parentBeanFactory != null &amp;&amp; !containsBeanDefinition(beanName)) &#123; // Not found -&gt; check parent. String nameToLookup = originalBeanName(name); if (args != null) &#123; // Delegation to parent with explicit args. return (T) parentBeanFactory.getBean(nameToLookup, args); &#125; else &#123; // No args -&gt; delegate to standard getBean method. return parentBeanFactory.getBean(nameToLookup, requiredType); &#125; &#125; if (!typeCheckOnly) &#123; markBeanAsCreated(beanName); &#125; try &#123; //转换并合并BeanDefinition属性 final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName); checkMergedBeanDefinition(mbd, beanName, args); // Guarantee initialization of beans that the current bean depends on. // 原型模式的bean需要循环检测依赖 防止出现A-&gt;B-&gt;A 的循环依赖情况出现 String[] dependsOn = mbd.getDependsOn(); if (dependsOn != null) &#123; for (String dep : dependsOn) &#123; if (isDependent(beanName, dep)) &#123; throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dep + "'"); &#125; registerDependentBean(dep, beanName); getBean(dep); &#125; &#125; // Create bean instance. // 创建bean实例 if (mbd.isSingleton()) &#123; sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; try &#123; return createBean(beanName, mbd, args); &#125; catch (BeansException ex) &#123; // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; &#125; &#125; &#125;); bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd); &#125; else if (mbd.isPrototype()) &#123; // It's a prototype -&gt; create a new instance. Object prototypeInstance = null; try &#123; beforePrototypeCreation(beanName); prototypeInstance = createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd); &#125; else &#123; String scopeName = mbd.getScope(); final Scope scope = this.scopes.get(scopeName); if (scope == null) &#123; throw new IllegalStateException("No Scope registered for scope name '" + scopeName + "'"); &#125; try &#123; Object scopedInstance = scope.get(beanName, new ObjectFactory&lt;Object&gt;() &#123; @Override public Object getObject() throws BeansException &#123; beforePrototypeCreation(beanName); try &#123; return createBean(beanName, mbd, args); &#125; finally &#123; afterPrototypeCreation(beanName); &#125; &#125; &#125;); bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd); &#125; catch (IllegalStateException ex) &#123; throw new BeanCreationException(beanName, "Scope '" + scopeName + "' is not active for the current thread; consider " + "defining a scoped proxy for this bean if you intend to refer to it from a singleton", ex); &#125; &#125; &#125; catch (BeansException ex) &#123; cleanupAfterBeanCreationFailure(beanName); throw ex; &#125; &#125; // Check if required type matches the type of the actual bean instance. // 转换bean类型 if (requiredType != null &amp;&amp; bean != null &amp;&amp; !requiredType.isAssignableFrom(bean.getClass())) &#123; try &#123; return getTypeConverter().convertIfNecessary(bean, requiredType); &#125; catch (TypeMismatchException ex) &#123; if (logger.isDebugEnabled()) &#123; logger.debug("Failed to convert bean '" + name + "' to required type '" + ClassUtils.getQualifiedName(requiredType) + "'", ex); &#125; throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass()); &#125; &#125; return (T) bean;&#125;spring事务隔离级别及事务传播实现propagation_requierd(spring的事务默认是该级别)：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113/** * Create a TransactionStatus for an existing transaction. */private TransactionStatus handleExistingTransaction( TransactionDefinition definition, Object transaction, boolean debugEnabled) throws TransactionException &#123; //若为非事务方式，则抛异常 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123; throw new IllegalTransactionStateException( "Existing transaction found for transaction marked with propagation 'never'"); &#125; // 若存在事务，挂起适当前事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123; if (debugEnabled) &#123; logger.debug("Suspending current transaction"); &#125; // 挂起当前事务 Object suspendedResources = suspend(transaction); boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS); return prepareTransactionStatus( definition, null, false, newSynchronization, debugEnabled, suspendedResources); &#125; // 挂起当前事务，并新建事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123; if (debugEnabled) &#123; logger.debug("Suspending current transaction, creating new transaction with name [" + definition.getName() + "]"); &#125; //挂起当前事务 SuspendedResourcesHolder suspendedResources = suspend(transaction); try &#123; boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); DefaultTransactionStatus status = newTransactionStatus( definition, transaction, true, newSynchronization, debugEnabled, suspendedResources); // 重新开启事务 doBegin(transaction, definition); prepareSynchronization(status, definition); return status; &#125; catch (RuntimeException beginEx) &#123; resumeAfterBeginException(transaction, suspendedResources, beginEx); throw beginEx; &#125; catch (Error beginErr) &#123; resumeAfterBeginException(transaction, suspendedResources, beginErr); throw beginErr; &#125; &#125; // 若当前事务存在，则嵌套执行事务 if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123; if (!isNestedTransactionAllowed()) &#123; throw new NestedTransactionNotSupportedException( "Transaction manager does not allow nested transactions by default - " + "specify 'nestedTransactionAllowed' property with value 'true'"); &#125; if (debugEnabled) &#123; logger.debug("Creating nested transaction with name [" + definition.getName() + "]"); &#125; // 判定是否支持事务备份点 if (useSavepointForNestedTransaction()) &#123; // Create savepoint within existing Spring-managed transaction, // through the SavepointManager API implemented by TransactionStatus. // Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization. DefaultTransactionStatus status = prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null); // 创建备份点 status.createAndHoldSavepoint(); return status; &#125; else &#123; // Nested transaction through nested begin and commit/rollback calls. // Usually only for JTA: Spring synchronization might get activated here // in case of a pre-existing JTA transaction. boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); DefaultTransactionStatus status = newTransactionStatus( definition, transaction, true, newSynchronization, debugEnabled, null); // 不支持备份点的情况下会新建事务 doBegin(transaction, definition); prepareSynchronization(status, definition); return status; &#125; &#125; // Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED. if (debugEnabled) &#123; logger.debug("Participating in existing transaction"); &#125; if (isValidateExistingTransaction()) &#123; if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123; Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel(); if (currentIsolationLevel == null || currentIsolationLevel != definition.getIsolationLevel()) &#123; Constants isoConstants = DefaultTransactionDefinition.constants; throw new IllegalTransactionStateException("Participating transaction with definition [" + definition + "] specifies isolation level which is incompatible with existing transaction: " + (currentIsolationLevel != null ? isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) : "(unknown)")); &#125; &#125; if (!definition.isReadOnly()) &#123; if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123; throw new IllegalTransactionStateException("Participating transaction with definition [" + definition + "] is not marked as read-only but existing transaction is"); &#125; &#125; &#125; boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);&#125;一些干货aop注入的实现过程doCreateBean中会暴露一个bean引用，用以处理循环引用；同时大家熟知的AOP就是通过getEarlyBeanReference(..)方法植入的；具体的，是在wrapIfNecessary(..) 方法中封装了advice并创建了代理；@Autowired注解的实现doCreateBean(..)中的populateBean(..)方法，实现了基于@Autowired注解的实现，根据名称或类型进行依赖的注入；]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>源码阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Mvc源码阅读]]></title>
    <url>%2F2018%2F10%2F19%2Fspringmvc%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[对springMVC的一些思考!!!Spring Mvc源码阅读12345678910111213SpringMVC核心处理流程：1、DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器2、HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）3、HandlerAdapter处理器适配器，请求数据绑定和转换，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）4、ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图5、然后再将Model模型中的数据渲染到View上这些过程都是以DispatcherServlet为中轴线进行的。入口源码springMVC的请求会交由dispatcherServlet处理，其本质上是一个多线程的请求处理机制；核心业务逻辑被设计在doDispatcher(..)方法中；123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100/** * Process the actual dispatching to the handler. * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order. * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters * to find the first that supports the handler class. * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers * themselves to decide which methods are acceptable. * @param request current HTTP request * @param response current HTTP response * @throws Exception in case of any kind of processing failure */protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; HttpServletRequest processedRequest = request; HandlerExecutionChain mappedHandler = null; boolean multipartRequestParsed = false; WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request); try &#123; ModelAndView mv = null; Exception dispatchException = null; try &#123; processedRequest = checkMultipart(request); multipartRequestParsed = (processedRequest != request); // 绑定url -&gt; 具体的handler/Controller.method(..) // Determine handler for the current request. mappedHandler = getHandler(processedRequest); if (mappedHandler == null || mappedHandler.getHandler() == null) &#123; noHandlerFound(processedRequest, response); return; &#125; // 根据handler绑定具体的adapter // Determine handler adapter for the current request. HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler()); // Process last-modified header, if supported by the handler. String method = request.getMethod(); boolean isGet = "GET".equals(method); if (isGet || "HEAD".equals(method)) &#123; long lastModified = ha.getLastModified(request, mappedHandler.getHandler()); if (logger.isDebugEnabled()) &#123; logger.debug("Last-Modified value for [" + getRequestUri(request) + "] is: " + lastModified); &#125; if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123; return; &#125; &#125; // interceptor 拦截器进行前置预处理 if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123; return; &#125; // 在handle方法中进行了请求数据的绑定，方法invoke，返回model的处理和封装等 // Actually invoke the handler. mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); if (asyncManager.isConcurrentHandlingStarted()) &#123; return; &#125; applyDefaultViewName(processedRequest, mv); mappedHandler.applyPostHandle(processedRequest, response, mv); &#125; catch (Exception ex) &#123; dispatchException = ex; &#125; catch (Throwable err) &#123; // As of 4.3, we're processing Errors thrown from handler methods as well, // making them available for @ExceptionHandler methods and other scenarios. dispatchException = new NestedServletException("Handler dispatch failed", err); &#125; processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException); &#125; catch (Exception ex) &#123; triggerAfterCompletion(processedRequest, response, mappedHandler, ex); &#125; catch (Throwable err) &#123; triggerAfterCompletion(processedRequest, response, mappedHandler, new NestedServletException("Handler processing failed", err)); &#125; finally &#123; if (asyncManager.isConcurrentHandlingStarted()) &#123; // Instead of postHandle and afterCompletion if (mappedHandler != null) &#123; mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response); &#125; &#125; else &#123; // Clean up any resources used by a multipart request. if (multipartRequestParsed) &#123; cleanupMultipart(processedRequest); &#125; &#125; &#125;&#125;核心关注的几个问题请求如何路由到具体的Controller上的方法进行处理?根据请求路径，与已知的handlerMapping进行匹配，并加入interceptors:dispatcherServlet.getHandler()最终调用AbstracteHandlerMapping.getHandlerExecutionChain(..)中进行url与handlerMapping进行匹配，并加入interceptors;扁平化的前端请求数据如何进行数据绑定？我们知道，前端的get/post等请求，会被requestServlet接受，并封装成HttpServletRequest的parameterMap中，每一项请求的数据结构都是 K-V 形的。而我们知道，像这样的形式，那么在这个中间数据如何实现数据绑定到Bean，String格式的Value 转换成各种目标格式。事实上，spring MVC将整个网络请求的处理流程进行了合理的切分,其大致的处理流程如下：12345678910111.调用匹配到的adapter.handle(..)2.然后调用invokeAndHandle(..)3.调用invokeForRequest(..)获取getMethodArgumentValues(..)获取和绑定入参;4.在具体的方法中，获取支持处理的argumentResolvers,然后调用resolveArgument(..)方法;5.在ModelAttributeMethodProcessor中调用bindRequestParameters(binder, webRequest),方法，然后再调用bind()进行bean参数的绑定；6.调用binder.convertIfNecessary(arg, parameter.getParameterType(), parameter)方法进行参数的转换；]]></content>
      <tags>
        <tag>Spring MVC</tag>
        <tag>Spring</tag>
        <tag>源码阅读</tag>
      </tags>
  </entry>
</search>
